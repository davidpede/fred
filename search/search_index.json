{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is Fred? Fred is a visual drag-and-drop fr ont-end ed itor for MODX CMS . It empowers ordinary people to create exceptional content without knowing how to code or learning complex interfaces. You can create content with Fred by merely dragging Elements from a sidebar and dropping them where you wish for them to appear. Select the copy you wish to change or click an image you want to update, edit directly in your browser, and click a green checkmark to save the changes. What does Fred do for developers and site builders? Fred helps theme builders break into the MODX ecosystem. It is easy to port existing themes to Fred and export them ready for the MODX Extras . Fred offers existing MODX developers an option to create more flexible and intuitive experiences for their site owners. Fred can power designs that would otherwise require dozens of TVs, a complex Manager UI, or tricky Manager customization. Fred brings content creators familiar visual controls like sliders, toggles and color pickers. Further, these controls can pass parameters to MODX Snippets and its API for a bulletproof and powerful content creation solution. In short, Fred makes constructing complex pages simple for even the most non-technical users. How is Fred different from other visual content builders? Fred adheres to MODX\u2019s core tenet of Creative Freedom. It doesn\u2019t force you into someone else\u2019s preferred front-end framework or way of building things. If you can imagine or prototype it, Fred can power it\u2014without compromise. Developers and designers can realize pixel-perfect websites and confidently turn over content creation duties without fear of things breaking. So whether a site is made by customizing a free starter theme, or handcrafted 100% from scratch, Fred can help everyone build websites faster, more consistently and with better results. What Else Can Fred Do? The following is a sample of Fred\u2019s capabilities that make it a compelling visual content building platform: Transform static Design Libraries into a live content creating tool that strictly adheres to brand standards, and that is easily understood and used by non-technical team members across your entire organization Use optional conditional/looping Twig template logic to create robust Elements limited only by your imagination Create and organize collections of Elements as building blocks for pages Blueprints provide \u201creplace the placeholders\u201d full- or partial-page templates Multiple dropzones for complete control of every page layout Configure content using a variety of controls including toggles, text inputs, date pickers, select inputs, sliders, Resource pickers, and color pickers Supports MODX code Snippets with live Ajax rendering of changes Visual Font Awesome 5 icon picker\u2014developers can create other icon pickers, too Simple content formatting with a curated default TinyMCE rich text editor Rearrange and re-order page content via drag-and-drop Quickly duplicate existing Elements to build up galleries and sliders Fred content renders down to cachable output for blazing-fast page speed Complete set of production-ready Bootstrap 4 Elements to slash the time needed for theme builders to get started","title":"What is Fred?"},{"location":"#what-is-fred","text":"Fred is a visual drag-and-drop fr ont-end ed itor for MODX CMS . It empowers ordinary people to create exceptional content without knowing how to code or learning complex interfaces. You can create content with Fred by merely dragging Elements from a sidebar and dropping them where you wish for them to appear. Select the copy you wish to change or click an image you want to update, edit directly in your browser, and click a green checkmark to save the changes.","title":"What is Fred?"},{"location":"#what-does-fred-do-for-developers-and-site-builders","text":"Fred helps theme builders break into the MODX ecosystem. It is easy to port existing themes to Fred and export them ready for the MODX Extras . Fred offers existing MODX developers an option to create more flexible and intuitive experiences for their site owners. Fred can power designs that would otherwise require dozens of TVs, a complex Manager UI, or tricky Manager customization. Fred brings content creators familiar visual controls like sliders, toggles and color pickers. Further, these controls can pass parameters to MODX Snippets and its API for a bulletproof and powerful content creation solution. In short, Fred makes constructing complex pages simple for even the most non-technical users.","title":"What does Fred do for developers and site builders?"},{"location":"#how-is-fred-different-from-other-visual-content-builders","text":"Fred adheres to MODX\u2019s core tenet of Creative Freedom. It doesn\u2019t force you into someone else\u2019s preferred front-end framework or way of building things. If you can imagine or prototype it, Fred can power it\u2014without compromise. Developers and designers can realize pixel-perfect websites and confidently turn over content creation duties without fear of things breaking. So whether a site is made by customizing a free starter theme, or handcrafted 100% from scratch, Fred can help everyone build websites faster, more consistently and with better results.","title":"How is Fred different from other visual content builders?"},{"location":"#what-else-can-fred-do","text":"The following is a sample of Fred\u2019s capabilities that make it a compelling visual content building platform: Transform static Design Libraries into a live content creating tool that strictly adheres to brand standards, and that is easily understood and used by non-technical team members across your entire organization Use optional conditional/looping Twig template logic to create robust Elements limited only by your imagination Create and organize collections of Elements as building blocks for pages Blueprints provide \u201creplace the placeholders\u201d full- or partial-page templates Multiple dropzones for complete control of every page layout Configure content using a variety of controls including toggles, text inputs, date pickers, select inputs, sliders, Resource pickers, and color pickers Supports MODX code Snippets with live Ajax rendering of changes Visual Font Awesome 5 icon picker\u2014developers can create other icon pickers, too Simple content formatting with a curated default TinyMCE rich text editor Rearrange and re-order page content via drag-and-drop Quickly duplicate existing Elements to build up galleries and sliders Fred content renders down to cachable output for blazing-fast page speed Complete set of production-ready Bootstrap 4 Elements to slash the time needed for theme builders to get started","title":"What Else Can Fred Do?"},{"location":"blueprints/","text":"Blueprints Blueprints are pre-designed content sections or even full pages of content. These can be used as starting points for structured content like landing pages, product pages, etc. Blueprints function as a \u201creplace the placeholders\u201d way to create content. They are a collection of one or more Elements with sample content and images in place. You can also use Blueprints as demo pages which theme users can use to start a site with complete layouts made up of any combination of content and Elements. Blueprints are organized into user-determined categories such as Headers, Landing Pages, Galleries, etc. Using Blueprints Like Elements, find a Blueprint you wish to use and drag-and-drop it into a Dropzone on a Fred-enabled page. Creating Blueprints Users with permissions to do so can save Blueprints and share them with others or keep them private so only their users can see them. Use cases for private Blueprints include testing by theme creators (since they won\u2019t be included in exported Themes), saving specific combinations and settings for Elements that only you will use, and end users currating frequently used Blueprints acros categories into a single location. A more advanced use case is overriding default settings of commonly used Elements to match frequently changed settings like changing margins, padding or text-alignment. Blueprint Screenshots When creating a Blueprint, it will generate a screenshot image for you. However, you may wish to manually create your own screenshot as the libary used to build screen captures does not understand all CSS properties. Full-page Blueprints Complete Blueprints are a copy of an entire page of content. You create these from the front-end when Fred is enabled. To create a complete Blueprint, click the Blueprints icon in the Fred sidebar, then choose an existing category from the top or create a new category for your Blueprints. Give your Blueprint a name and save Partial Blueprints Partial Blueprints are made from the overlapping, rounded-corner squares icon that appears when hovering/focusing an Element in the front-end. Click this Blueprint icon, choose a category, give it a name, and save.","title":"Blueprints"},{"location":"blueprints/#blueprints","text":"Blueprints are pre-designed content sections or even full pages of content. These can be used as starting points for structured content like landing pages, product pages, etc. Blueprints function as a \u201creplace the placeholders\u201d way to create content. They are a collection of one or more Elements with sample content and images in place. You can also use Blueprints as demo pages which theme users can use to start a site with complete layouts made up of any combination of content and Elements. Blueprints are organized into user-determined categories such as Headers, Landing Pages, Galleries, etc.","title":"Blueprints"},{"location":"blueprints/#using-blueprints","text":"Like Elements, find a Blueprint you wish to use and drag-and-drop it into a Dropzone on a Fred-enabled page.","title":"Using Blueprints"},{"location":"blueprints/#creating-blueprints","text":"Users with permissions to do so can save Blueprints and share them with others or keep them private so only their users can see them. Use cases for private Blueprints include testing by theme creators (since they won\u2019t be included in exported Themes), saving specific combinations and settings for Elements that only you will use, and end users currating frequently used Blueprints acros categories into a single location. A more advanced use case is overriding default settings of commonly used Elements to match frequently changed settings like changing margins, padding or text-alignment.","title":"Creating Blueprints"},{"location":"blueprints/#blueprint-screenshots","text":"When creating a Blueprint, it will generate a screenshot image for you. However, you may wish to manually create your own screenshot as the libary used to build screen captures does not understand all CSS properties.","title":"Blueprint Screenshots"},{"location":"blueprints/#full-page-blueprints","text":"Complete Blueprints are a copy of an entire page of content. You create these from the front-end when Fred is enabled. To create a complete Blueprint, click the Blueprints icon in the Fred sidebar, then choose an existing category from the top or create a new category for your Blueprints. Give your Blueprint a name and save","title":"Full-page Blueprints"},{"location":"blueprints/#partial-blueprints","text":"Partial Blueprints are made from the overlapping, rounded-corner squares icon that appears when hovering/focusing an Element in the front-end. Click this Blueprint icon, choose a category, give it a name, and save.","title":"Partial Blueprints"},{"location":"credits/","text":"Credits Fred uses Open Source components. You can find the source code, along with license information, in the links below. We acknowledge and are grateful to these developers for their contributions to open source. UI & Related Choices.js Homepage: https://joshuajohnson.co.uk/Choices/ Copyright (c) 2016 Josh Johnson http://joshuajohnson.co.uk/ License (MIT): https://github.com/jshjohnson/Choices/blob/master/LICENSE Usage: vanilla JS select box/text input inspired by Select2 and Selectize Dragula Homepage: https://bevacqua.github.io/dragula/ Copyright (c) 2015-2016 Nicolas Bevacqua https://ponyfoo.com/ License (MIT): https://github.com/bevacqua/dragula/blob/master/license Usage: drag and drop flatpickr Homepage: https://flatpickr.js.org Copyright (c) 2017 Gregory Petrosyan https://github.com/chmln License (MIT): https://github.com/flatpickr/flatpickr/blob/master/LICENSE.md Usage: datetime picker hoverintent Homepage: https://www.npmjs.com/package/hoverintent Copyright (c) 2007-2017 Brian Cherne https://github.com/briancherne Copyright (c) Tristen Brown https://www.npmjs.com/~tristen License (MIT): https://github.com/tristen/hoverintent/blob/gh-pages/LICENCE Usage: vanilla JS version of Brian Cherne's mouse-tracking tool html2canvas Homepage: https://html2canvas.hertzen.com/ Copyright (c) 2012 Niklas von Hertzen https://hertzen.com/ License (MIT): https://github.com/flatpickr/flatpickr/blob/master/LICENSE.md Usage: screenshots with JavaScript Mousetrap Homepage: https://craig.is/killing/mice Copyright 2012-2017 Craig Campbell https://craig.is/ License (Apache License 2.0): https://github.com/ccampbell/mousetrap/blob/master/LICENSE Usage: keyboard shortcuts noUiSlider Homepage: https://github.com/leongersen/noUiSlider Copyright (c) 2018 L\u00e9on Gersen https://refreshless.com/blog/ License (MIT): https://github.com/leongersen/noUiSlider/blob/master/LICENSE.md Usage: vanilla JS range slider control Tabulator Homepage: http://tabulator.info/ Copyright (c) 2015-2019 Oli Folkerd https://github.com/olifolkerd License (MIT): https://github.com/olifolkerd/tabulator/blob/master/LICENSE Usage: data grids/tables Twig Homepage: https://twig.symfony.com/ Copyright (c) 2009-2019 by the Twig Team http://fabien.potencier.org/ License (new BSD License): https://twig.symfony.com/license Usage: a JavaScript and PHP template engine Code & Logic isomorphic-fetch Homepage: https://github.com/matthew-andrews/isomorphic-fetch Copyright (c) 2015 Matt Andrews https://mattandre.ws/ License (MIT): https://github.com/matthew-andrews/isomorphic-fetch/blob/master/LICENSE Usage: Fetch for node and Browserify. Built on top of GitHub's WHATWG Fetch polyfill. jsSHA Homepage: https://caligatio.github.io/jsSHA/ Copyright (c) 1998-2009 Paul Johnston & Contributors Copyright (c) 2008-2018 Brian Turek https://github.com/Caligatio License (MIT): https://github.com/rico345100/promise-cancel#license Usage: a JavaScript implementation of the entire family of SHA hashes Lodash Homepage: https://lodash.com/ Usage: taking the hassle out of working with arrays, numbers, objects, strings, etc. Copyright JS Foundation and other contributors https://js.foundation/ License (MIT): https://raw.githubusercontent.com/lodash/lodash/4.17.11-npm/LICENSE promise-cancel Homepage: https://github.com/rico345100/promise-cancel#readme Copyright (c) .modernator http://modernator.me/ License (MIT): https://github.com/rico345100/promise-cancel#license Usage: cancel/timeout Promises","title":"Credits"},{"location":"credits/#credits","text":"Fred uses Open Source components. You can find the source code, along with license information, in the links below. We acknowledge and are grateful to these developers for their contributions to open source.","title":"Credits"},{"location":"credits/#ui-related","text":"","title":"UI &amp; Related"},{"location":"credits/#choicesjs","text":"Homepage: https://joshuajohnson.co.uk/Choices/ Copyright (c) 2016 Josh Johnson http://joshuajohnson.co.uk/ License (MIT): https://github.com/jshjohnson/Choices/blob/master/LICENSE Usage: vanilla JS select box/text input inspired by Select2 and Selectize","title":"Choices.js"},{"location":"credits/#dragula","text":"Homepage: https://bevacqua.github.io/dragula/ Copyright (c) 2015-2016 Nicolas Bevacqua https://ponyfoo.com/ License (MIT): https://github.com/bevacqua/dragula/blob/master/license Usage: drag and drop","title":"Dragula"},{"location":"credits/#flatpickr","text":"Homepage: https://flatpickr.js.org Copyright (c) 2017 Gregory Petrosyan https://github.com/chmln License (MIT): https://github.com/flatpickr/flatpickr/blob/master/LICENSE.md Usage: datetime picker","title":"flatpickr"},{"location":"credits/#hoverintent","text":"Homepage: https://www.npmjs.com/package/hoverintent Copyright (c) 2007-2017 Brian Cherne https://github.com/briancherne Copyright (c) Tristen Brown https://www.npmjs.com/~tristen License (MIT): https://github.com/tristen/hoverintent/blob/gh-pages/LICENCE Usage: vanilla JS version of Brian Cherne's mouse-tracking tool","title":"hoverintent"},{"location":"credits/#html2canvas","text":"Homepage: https://html2canvas.hertzen.com/ Copyright (c) 2012 Niklas von Hertzen https://hertzen.com/ License (MIT): https://github.com/flatpickr/flatpickr/blob/master/LICENSE.md Usage: screenshots with JavaScript","title":"html2canvas"},{"location":"credits/#mousetrap","text":"Homepage: https://craig.is/killing/mice Copyright 2012-2017 Craig Campbell https://craig.is/ License (Apache License 2.0): https://github.com/ccampbell/mousetrap/blob/master/LICENSE Usage: keyboard shortcuts","title":"Mousetrap"},{"location":"credits/#nouislider","text":"Homepage: https://github.com/leongersen/noUiSlider Copyright (c) 2018 L\u00e9on Gersen https://refreshless.com/blog/ License (MIT): https://github.com/leongersen/noUiSlider/blob/master/LICENSE.md Usage: vanilla JS range slider control","title":"noUiSlider"},{"location":"credits/#tabulator","text":"Homepage: http://tabulator.info/ Copyright (c) 2015-2019 Oli Folkerd https://github.com/olifolkerd License (MIT): https://github.com/olifolkerd/tabulator/blob/master/LICENSE Usage: data grids/tables","title":"Tabulator"},{"location":"credits/#twig","text":"Homepage: https://twig.symfony.com/ Copyright (c) 2009-2019 by the Twig Team http://fabien.potencier.org/ License (new BSD License): https://twig.symfony.com/license Usage: a JavaScript and PHP template engine","title":"Twig"},{"location":"credits/#code-logic","text":"","title":"Code &amp; Logic"},{"location":"credits/#isomorphic-fetch","text":"Homepage: https://github.com/matthew-andrews/isomorphic-fetch Copyright (c) 2015 Matt Andrews https://mattandre.ws/ License (MIT): https://github.com/matthew-andrews/isomorphic-fetch/blob/master/LICENSE Usage: Fetch for node and Browserify. Built on top of GitHub's WHATWG Fetch polyfill.","title":"isomorphic-fetch"},{"location":"credits/#jssha","text":"Homepage: https://caligatio.github.io/jsSHA/ Copyright (c) 1998-2009 Paul Johnston & Contributors Copyright (c) 2008-2018 Brian Turek https://github.com/Caligatio License (MIT): https://github.com/rico345100/promise-cancel#license Usage: a JavaScript implementation of the entire family of SHA hashes","title":"jsSHA"},{"location":"credits/#lodash","text":"Homepage: https://lodash.com/ Usage: taking the hassle out of working with arrays, numbers, objects, strings, etc. Copyright JS Foundation and other contributors https://js.foundation/ License (MIT): https://raw.githubusercontent.com/lodash/lodash/4.17.11-npm/LICENSE","title":"Lodash"},{"location":"credits/#promise-cancel","text":"Homepage: https://github.com/rico345100/promise-cancel#readme Copyright (c) .modernator http://modernator.me/ License (MIT): https://github.com/rico345100/promise-cancel#license Usage: cancel/timeout Promises","title":"promise-cancel"},{"location":"elements/","text":"Elements Fred Elements are the basic building blocks used by end-users to create content. They can be as simple as a single headline or paragraph, or more complex like a hero intro with configurable background images, text padding, opacity settings and more. Organizaion Elements can be organized to aid content creators in finding different types of content using Categories. For example, a Theme might contain the following Element Categories: Page Intros Feature Sections Quotes Code Blocks Galleries Creating Fred Elements To learn more about creating Template for Fred, see the themers documentation .","title":"Elements"},{"location":"elements/#elements","text":"Fred Elements are the basic building blocks used by end-users to create content. They can be as simple as a single headline or paragraph, or more complex like a hero intro with configurable background images, text padding, opacity settings and more.","title":"Elements"},{"location":"elements/#organizaion","text":"Elements can be organized to aid content creators in finding different types of content using Categories. For example, a Theme might contain the following Element Categories: Page Intros Feature Sections Quotes Code Blocks Galleries","title":"Organizaion"},{"location":"elements/#creating-fred-elements","text":"To learn more about creating Template for Fred, see the themers documentation .","title":"Creating Fred Elements"},{"location":"fred_for_existing_modxers/","text":"Fred for Current MODX Developers Fred is a visual drag-and-drop content editor that can minimize or eliminate the need for daily content authors and editors to use the MODX Manager. As such, Fred allows users to author content without having to learn the Manager, interacting with content as it will show on the page. This visual, drag-and-drop experience is considered more intuitive and easy to learn by many. Websites powered by Fred can co-exist with traditional MODX Manager controlled pages, but Fred-powered pages must be edited from the Fred UI. When logged into a site as a Fred editor, you will see several circular icons overlaid on the page that give you access to the Fred controls: When hovering parts of a Fred-enabled page, you will see sections highlighted with a blue border. These are the Elements used to create the page. The name of the Element used for that section will show in on the bottom left when hovered, and positioning and settings controls will be at the bottom-right: Users will frequently interact with the Sidebar, accessed by clicking the main MODX icon. Depending on how the site owners or developers have Fred configured, these main Fred controls will be located in one of the corners on the page. The \u201cSite\u201d menus is like the Manager tree, but only shows Fred-enabled pages. The \u201cBlueprints\u201d menu gives you the ability to create and use Blueprints . The \u201cElements\u201d menu gives you access to use Elements to construct or add to a page. The \u201cSettings\u201d menu is where page settings are configured, similar to what is in the MODX Manager for scheduled publishing, menu options, advanced settings, URL alias, and pagetitle/longtitle/etc. The \u201cMore\u2026\u201d menu gives users access to opening the page in the Manager, a link to the documentation, an optin to disable Fred, and a the ability to logout and view the site exactly as a normal site visitor would. The \u201cPreview\u201d icon (eye) shows the page under a top bar with a responsive site preview simulator with phone, tablet and full desktop responsive views. The \u201cClose\u201d icon (x) closes the sidebar, returning it to the initial Fred-loaded 4-circles state. The \u201cSave\u201d icon (check mark) saves the page. Elements Elements are the basic building block of Fred. These can be as simple as a headline, or much more complex like a complete product layout used in an e-commerce store. When logged into a site as a Fred editor, hovering parts of the page will highlight sections with a blue box, the boundary of the Element itself. Elements are configured by Option Sets which are accessed by clicking the gear icon then the \u201cOpen Settings & Plugins\u201d in the lower-right of the Element when hovered. Elements can be duplicated or used more than one time on Fred pages. Element Controls When hovering an Element, a set of positioning controls at the bottom, with a gear icon for the Element's settings appears in the lower-right. The Option Set menu is generated from a JSON text array managed through the Fred Third-party Component . Settings Menu Trigger The Option Sets attached to an Element are revealed by clicking the gear icon, just above the position conrols. Settings Menu The Settings Menu allows users (with appropriate permissions to perform several actions on an Element): Take a screenshot of the current state of the Element used when creating themes Create a partial Blueprint based on the current state of the Element Open the Settings panel for configuring the Element Duplicating the Element immediately after the current one Delete the Element from the page Position Controls Elements can either be dragged into position by using the grip icon in the middle of the poisition controls, or click the up or down arrows to move them up or down on the page. Fred vs Traditional MODX Templates What sets Fred apart from traditional MODX templates is the lack of reliance on Template Variables (TVs) for creating complex page layouts. This brings the benefit of greater simplicity and possibly faster performance without sacrificing the flexibility that TVs brought to MODX in the first place. In Fred, TVs are often replaced by Option Sets , and can be an effective substitue in many cases without the added complexity and database overhead of TVs. The current limitation for Option Sets is that they can only contain text values, so they only best used for things like text, textarea, richtext, numbers, etc. Where TVs make sense in Fred TVs still have a place in Fred for pages that require the use of MIGX or Google Map marker TVs. TVs also are also useful for segregating content into searchable vs non-searchable in your site. For example, things in a [[*sidebar]] TV could be omitted from search results with the parts of the page in the [[*content]] field still searched. What replaces TVs In Fred, Option Sets can effectively replace many use cases that previously would have required TVs in the MODX Manager. Option settings are the controls that appear when you click the gear icon for each MODX Element on a page. The gear icon also gives content authors and editors access ot the typical MODX page settings like scheduled publishing, show/hid from menu, etc. Option Sets can contain multiple items that previously would have required dedicated TVs such as toggles for enabling different layout options, text or richtext inputs, sliders to set numbers, color pickers, Font Awesome icon choosers, image uploaders, and more.","title":"Fred for Existing MODXers"},{"location":"fred_for_existing_modxers/#fred-for-current-modx-developers","text":"Fred is a visual drag-and-drop content editor that can minimize or eliminate the need for daily content authors and editors to use the MODX Manager. As such, Fred allows users to author content without having to learn the Manager, interacting with content as it will show on the page. This visual, drag-and-drop experience is considered more intuitive and easy to learn by many. Websites powered by Fred can co-exist with traditional MODX Manager controlled pages, but Fred-powered pages must be edited from the Fred UI. When logged into a site as a Fred editor, you will see several circular icons overlaid on the page that give you access to the Fred controls: When hovering parts of a Fred-enabled page, you will see sections highlighted with a blue border. These are the Elements used to create the page. The name of the Element used for that section will show in on the bottom left when hovered, and positioning and settings controls will be at the bottom-right: Users will frequently interact with the Sidebar, accessed by clicking the main MODX icon. Depending on how the site owners or developers have Fred configured, these main Fred controls will be located in one of the corners on the page. The \u201cSite\u201d menus is like the Manager tree, but only shows Fred-enabled pages. The \u201cBlueprints\u201d menu gives you the ability to create and use Blueprints . The \u201cElements\u201d menu gives you access to use Elements to construct or add to a page. The \u201cSettings\u201d menu is where page settings are configured, similar to what is in the MODX Manager for scheduled publishing, menu options, advanced settings, URL alias, and pagetitle/longtitle/etc. The \u201cMore\u2026\u201d menu gives users access to opening the page in the Manager, a link to the documentation, an optin to disable Fred, and a the ability to logout and view the site exactly as a normal site visitor would. The \u201cPreview\u201d icon (eye) shows the page under a top bar with a responsive site preview simulator with phone, tablet and full desktop responsive views. The \u201cClose\u201d icon (x) closes the sidebar, returning it to the initial Fred-loaded 4-circles state. The \u201cSave\u201d icon (check mark) saves the page.","title":"Fred for Current MODX Developers"},{"location":"fred_for_existing_modxers/#elements","text":"Elements are the basic building block of Fred. These can be as simple as a headline, or much more complex like a complete product layout used in an e-commerce store. When logged into a site as a Fred editor, hovering parts of the page will highlight sections with a blue box, the boundary of the Element itself. Elements are configured by Option Sets which are accessed by clicking the gear icon then the \u201cOpen Settings & Plugins\u201d in the lower-right of the Element when hovered. Elements can be duplicated or used more than one time on Fred pages.","title":"Elements"},{"location":"fred_for_existing_modxers/#element-controls","text":"When hovering an Element, a set of positioning controls at the bottom, with a gear icon for the Element's settings appears in the lower-right. The Option Set menu is generated from a JSON text array managed through the Fred Third-party Component .","title":"Element Controls"},{"location":"fred_for_existing_modxers/#settings-menu-trigger","text":"The Option Sets attached to an Element are revealed by clicking the gear icon, just above the position conrols.","title":"Settings Menu Trigger"},{"location":"fred_for_existing_modxers/#settings-menu","text":"The Settings Menu allows users (with appropriate permissions to perform several actions on an Element): Take a screenshot of the current state of the Element used when creating themes Create a partial Blueprint based on the current state of the Element Open the Settings panel for configuring the Element Duplicating the Element immediately after the current one Delete the Element from the page","title":"Settings Menu"},{"location":"fred_for_existing_modxers/#position-controls","text":"Elements can either be dragged into position by using the grip icon in the middle of the poisition controls, or click the up or down arrows to move them up or down on the page.","title":"Position Controls"},{"location":"fred_for_existing_modxers/#fred-vs-traditional-modx-templates","text":"What sets Fred apart from traditional MODX templates is the lack of reliance on Template Variables (TVs) for creating complex page layouts. This brings the benefit of greater simplicity and possibly faster performance without sacrificing the flexibility that TVs brought to MODX in the first place. In Fred, TVs are often replaced by Option Sets , and can be an effective substitue in many cases without the added complexity and database overhead of TVs. The current limitation for Option Sets is that they can only contain text values, so they only best used for things like text, textarea, richtext, numbers, etc.","title":"Fred vs Traditional MODX Templates"},{"location":"fred_for_existing_modxers/#where-tvs-make-sense-in-fred","text":"TVs still have a place in Fred for pages that require the use of MIGX or Google Map marker TVs. TVs also are also useful for segregating content into searchable vs non-searchable in your site. For example, things in a [[*sidebar]] TV could be omitted from search results with the parts of the page in the [[*content]] field still searched.","title":"Where TVs make sense in Fred"},{"location":"fred_for_existing_modxers/#what-replaces-tvs","text":"In Fred, Option Sets can effectively replace many use cases that previously would have required TVs in the MODX Manager. Option settings are the controls that appear when you click the gear icon for each MODX Element on a page. The gear icon also gives content authors and editors access ot the typical MODX page settings like scheduled publishing, show/hid from menu, etc. Option Sets can contain multiple items that previously would have required dedicated TVs such as toggles for enabling different layout options, text or richtext inputs, sliders to set numbers, color pickers, Font Awesome icon choosers, image uploaders, and more.","title":"What replaces TVs"},{"location":"getting_started/","text":"Getting Started The easiest way to start with Fred is to install a Fred Theme. Pick and install a Theme from the MODX Extras repository into your MODX website. Add a new page to your site. Choose one of the Templates from the Theme and save the Page. Click the Preview button to visit this page from the front-end to start building with Fred. If you\u2019re interested in creating Themes from scratch, please see the Theme Creation Tutorial . PHP Requirements Fred requires PHP version 7.1.3 or later to run with support for the php-bcmath extension. PHP 5.5.9 or later should work, but is not officially supported, and we strongly recommend using non-EOL versions of PHP. Fred Editor Requirements The Fred editing tool requires a modern browser: Chrome 41 or later Firefox 32 or later Safari 9.0 or later Edge 75 or later","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"The easiest way to start with Fred is to install a Fred Theme. Pick and install a Theme from the MODX Extras repository into your MODX website. Add a new page to your site. Choose one of the Templates from the Theme and save the Page. Click the Preview button to visit this page from the front-end to start building with Fred. If you\u2019re interested in creating Themes from scratch, please see the Theme Creation Tutorial .","title":"Getting Started"},{"location":"getting_started/#php-requirements","text":"Fred requires PHP version 7.1.3 or later to run with support for the php-bcmath extension. PHP 5.5.9 or later should work, but is not officially supported, and we strongly recommend using non-EOL versions of PHP.","title":"PHP Requirements"},{"location":"getting_started/#fred-editor-requirements","text":"The Fred editing tool requires a modern browser: Chrome 41 or later Firefox 32 or later Safari 9.0 or later Edge 75 or later","title":"Fred Editor Requirements"},{"location":"templates/","text":"MODX Templates & Fred Fred only loads on Pages which use MODX Templates that are assigned to a Fred Theme. These are identified in the Manager by visiting the Extras menu > Fred > Themes top tab > Themed Templates sidebar. Any pages that use a Template listed in this table will block access to the content area in the Manager and will load Fred on the front-end when logged in for editing. Dropzones Most templates will have a content Dropzone. Fred also supports multiple Dropzones for things like sidebars, headers, footers, or any other purpose you may need. Dropzones are where you drag-and-drop Elements and Blueprints from the Fred sidebar. Creating Fred Templates To learn more about creating Template for Fred, see the themers documentation .","title":"MODX Templates & Fred"},{"location":"templates/#modx-templates-fred","text":"Fred only loads on Pages which use MODX Templates that are assigned to a Fred Theme. These are identified in the Manager by visiting the Extras menu > Fred > Themes top tab > Themed Templates sidebar. Any pages that use a Template listed in this table will block access to the content area in the Manager and will load Fred on the front-end when logged in for editing.","title":"MODX Templates &amp; Fred"},{"location":"templates/#dropzones","text":"Most templates will have a content Dropzone. Fred also supports multiple Dropzones for things like sidebars, headers, footers, or any other purpose you may need. Dropzones are where you drag-and-drop Elements and Blueprints from the Fred sidebar.","title":"Dropzones"},{"location":"templates/#creating-fred-templates","text":"To learn more about creating Template for Fred, see the themers documentation .","title":"Creating Fred Templates"},{"location":"collab/","text":"Collaborating on Themes Collaborating on Themes can be a great way to build a robust solution you can share in the MODX Extras. The reasons to collaborate with a team include: Front-end developers only worry about the markup Customer service or projects managers can focus on creating logical and simple Option Sets Product owners can work on Screenshots, Default configurations, README and CHANGELOG files Developers can implement custom code for specific functionality The Simple Way The easiest way to collaborate on a Theme is to simply invite a group of people to a site and to have them work away. Export your Theme when your happy with the results, and you\u2019re done! The \u201cRight\u201d Way If you are working with a team of people to create a Theme, storing the components in a Git repository can be a great way to collaborate. The advantage of this is that the work is versioned, making overwriting someone\u2019s work no big deal. The rest of this section is dedicated to explaining how to do this using Gitify.","title":"Intro to Collaborating"},{"location":"collab/#collaborating-on-themes","text":"Collaborating on Themes can be a great way to build a robust solution you can share in the MODX Extras. The reasons to collaborate with a team include: Front-end developers only worry about the markup Customer service or projects managers can focus on creating logical and simple Option Sets Product owners can work on Screenshots, Default configurations, README and CHANGELOG files Developers can implement custom code for specific functionality","title":"Collaborating on Themes"},{"location":"collab/#the-simple-way","text":"The easiest way to collaborate on a Theme is to simply invite a group of people to a site and to have them work away. Export your Theme when your happy with the results, and you\u2019re done!","title":"The Simple Way"},{"location":"collab/#the-right-way","text":"If you are working with a team of people to create a Theme, storing the components in a Git repository can be a great way to collaborate. The advantage of this is that the work is versioned, making overwriting someone\u2019s work no big deal. The rest of this section is dedicated to explaining how to do this using Gitify.","title":"The \u201cRight\u201d Way"},{"location":"collab/gitify/","text":"Setting up Gitify Gitify brings two-way sync of data typically stored in the MODX database, making it versionable with git. It acts as a CLI tool, like Composer, for working with MODX. While this document may seem intimdating at first, it really is a simple copy/paste command line exercise. Things you\u2019ll need to access or be familiar with: A Github Account Basic command line SSH skills (optional, but easier to follow this) A MODX Cloud account, or a host that supports git Getting Started For the purpose of this tutorial, we\u2019re assuming you will use MODX Cloud. Start by creating a blank MODX instance using the latest version. You\u2019ll also need to ssh into your site to set up Gitify. Step 1: Install Composer and Gitify Once the instance is created, ssh into it and execute the following commands starting in the home directory. This will install Composer and copy Gitify to your site. cd www; curl http://modx.co/scripts/install.sh | sh mkdir ../gitify; cd ../gitify git clone https://github.com/modmore/Gitify.git ./ Now exit the SSH session, and log back in so you can use Composer. Alternately, you can use a command like source /paas/cXXXX/.profile , replacing the cXXXX with your actual Cloud directory. Step 2: Set up Gitify From an SSH connection in the Cloud home directory: cd ~/gitify composer install chmod +x Gitify; cd ~/.bin; ln -s ../gitify/Gitify gitify After the composer install command you can confirm things worked if you see a green line of text that says \u201cGenerating autoload files\u201d. Again, log out of the SSH session so you use Gitify, or use the source\u2026 command above. Step 3: Get the Clone URL For the purposes of this tutorial, we\u2019ll use a hypothetical (but non-existant) Example Theme. To get the URL to clone, on github.com find the repository you wish to work on, and click the down-arrow on the green Clone or download button and choose the SSH URL, like git@github.com:modxcms/example.git To start a new Theme project, see the Setting up a Theme to work with Gitify guide. Step 4: Clone the Shared Theme to your MODX Instance Because you cannot git clone into a directory with anything in it, we\u2019ll use a temporary location and move the files to the web root. To get the URL to clone, click the down-arrow on the green Clone or download button on a Theme Github project and copy the SSH URL which looks like git@github.com:modxcms/fred-theme-starter.git cd ~/www git clone git@github.com:modxcms/fred-theme-starter.git tmp This will download the theme repository into a ~/www/tmp/ directory in the Cloud. Next, move the contents of tmp/ to the correct location under www/ : rsync -av ./tmp ./ Make sure the .git/ directory and files are move under www/ . Once you confirm things are in the right place, go ahead and remove tmp/ : rm -rf ./tmp Step 5: Load the Theme using Gitify Now it\u2019s time to load the Theme into your MODX instance. This will most likely include several Extras and take a a minute or longer depending on the speed of your connection. You\u2019ll see messages about downloading and installing Extras during this process: cd ~/www gitify package:install --all gitify build You should see a green one-word message Done! if the install is successful, and the same but with memory and timing stats if the build is successful. Step 6: Login to the Manager to view your Theme When done you can log in to your Manager and see the Extras, including Fred, which were installed, and review the Elements, Bluprints and Options contained in the Theme. Next steps Once you have cloned your theme to your MODX instance, you can work with a remote repository in git to collaborate .","title":"Setting up Gitify"},{"location":"collab/gitify/#setting-up-gitify","text":"Gitify brings two-way sync of data typically stored in the MODX database, making it versionable with git. It acts as a CLI tool, like Composer, for working with MODX. While this document may seem intimdating at first, it really is a simple copy/paste command line exercise. Things you\u2019ll need to access or be familiar with: A Github Account Basic command line SSH skills (optional, but easier to follow this) A MODX Cloud account, or a host that supports git","title":"Setting up Gitify"},{"location":"collab/gitify/#getting-started","text":"For the purpose of this tutorial, we\u2019re assuming you will use MODX Cloud. Start by creating a blank MODX instance using the latest version. You\u2019ll also need to ssh into your site to set up Gitify.","title":"Getting Started"},{"location":"collab/gitify/#step-1-install-composer-and-gitify","text":"Once the instance is created, ssh into it and execute the following commands starting in the home directory. This will install Composer and copy Gitify to your site. cd www; curl http://modx.co/scripts/install.sh | sh mkdir ../gitify; cd ../gitify git clone https://github.com/modmore/Gitify.git ./ Now exit the SSH session, and log back in so you can use Composer. Alternately, you can use a command like source /paas/cXXXX/.profile , replacing the cXXXX with your actual Cloud directory.","title":"Step 1: Install Composer and Gitify"},{"location":"collab/gitify/#step-2-set-up-gitify","text":"From an SSH connection in the Cloud home directory: cd ~/gitify composer install chmod +x Gitify; cd ~/.bin; ln -s ../gitify/Gitify gitify After the composer install command you can confirm things worked if you see a green line of text that says \u201cGenerating autoload files\u201d. Again, log out of the SSH session so you use Gitify, or use the source\u2026 command above.","title":"Step 2: Set up Gitify"},{"location":"collab/gitify/#step-3-get-the-clone-url","text":"For the purposes of this tutorial, we\u2019ll use a hypothetical (but non-existant) Example Theme. To get the URL to clone, on github.com find the repository you wish to work on, and click the down-arrow on the green Clone or download button and choose the SSH URL, like git@github.com:modxcms/example.git To start a new Theme project, see the Setting up a Theme to work with Gitify guide.","title":"Step 3: Get the Clone URL"},{"location":"collab/gitify/#step-4-clone-the-shared-theme-to-your-modx-instance","text":"Because you cannot git clone into a directory with anything in it, we\u2019ll use a temporary location and move the files to the web root. To get the URL to clone, click the down-arrow on the green Clone or download button on a Theme Github project and copy the SSH URL which looks like git@github.com:modxcms/fred-theme-starter.git cd ~/www git clone git@github.com:modxcms/fred-theme-starter.git tmp This will download the theme repository into a ~/www/tmp/ directory in the Cloud. Next, move the contents of tmp/ to the correct location under www/ : rsync -av ./tmp ./ Make sure the .git/ directory and files are move under www/ . Once you confirm things are in the right place, go ahead and remove tmp/ : rm -rf ./tmp","title":"Step 4: Clone the Shared Theme to your MODX Instance"},{"location":"collab/gitify/#step-5-load-the-theme-using-gitify","text":"Now it\u2019s time to load the Theme into your MODX instance. This will most likely include several Extras and take a a minute or longer depending on the speed of your connection. You\u2019ll see messages about downloading and installing Extras during this process: cd ~/www gitify package:install --all gitify build You should see a green one-word message Done! if the install is successful, and the same but with memory and timing stats if the build is successful.","title":"Step 5: Load the Theme using Gitify"},{"location":"collab/gitify/#step-6-login-to-the-manager-to-view-your-theme","text":"When done you can log in to your Manager and see the Extras, including Fred, which were installed, and review the Elements, Bluprints and Options contained in the Theme.","title":"Step 6: Login to the Manager to view your Theme"},{"location":"collab/gitify/#next-steps","text":"Once you have cloned your theme to your MODX instance, you can work with a remote repository in git to collaborate .","title":"Next steps"},{"location":"collab/gitify_in_action/","text":"Using Gitify to Collaborate on Themes You must have Gitify set up with your theme in order to follow these instructions. Working with Gitify and Git A common purpose of collaborating on a Theme will be to build a series of Elements, Bluepints, Options, and RTE Configs. For the purpose of this tutorial, we\u2019ll assume all users can commit directly to the master repository. If you need to set up a respository for collaboration, see Setting up a Theme to work with Gitify . 1. Push your Changes or Pull the Lastest It\u2019s critical to make sure that you don\u2019t lose work when collaborating with a team. To prevent accidental overwrites, always perform the following before pulling from or pushing to the orign repository. cd ~/www gitify extract git status The gitify extract command will sycn your current Fred Theme to the filesystem. The git status command will tell you if you have changes that need to be committed. 2. Commit changes to your local repo This step and step 4 below can be skipped if ther are no changes to commit. If you do have changes, first commit them to your local repository before continuing: git add --all # or git add on files you want to commit git commit -m \"Your commit message here\" # please write your own message 3. Pull the latest contributions from your collaborators Now it is time to sync all the latest updates from the upstream origin repository. From webroot, enter the following command: git pull origin master This may result in conflicts that will be noted. If there are conflicts, they must be resolved before you can continue. A conflict happens when two people change the same line of code. For information on resolving conflicts, please see Github\u2019s guide to resolving conflicts . Once you resolve conflicts, or after you have pulled from the origin, build the changes and make sure everything is functioning as expected in MODX: gitify package:install --all gitify build 4. Push your changes to the origin repository to share with collaborators If you are only pulling remote changes, skip this step as in step 2 above. Now you can safely push your changes. You\u2019ll see messages about Extracting various Fred-related things. If you delay pushing your changes, you may see an error message about (new) conflicts due to other collaborators pushing changes before you: git push origin master You have now successfully worked with a team to build a theme. If you need to collaborate using PRs, like for the Fred Starter Theme available as a demo from MODX, please see the Pull Request Git Workflow guide.","title":"Basic Gitify Usage"},{"location":"collab/gitify_in_action/#using-gitify-to-collaborate-on-themes","text":"You must have Gitify set up with your theme in order to follow these instructions.","title":"Using Gitify to Collaborate on Themes"},{"location":"collab/gitify_in_action/#working-with-gitify-and-git","text":"A common purpose of collaborating on a Theme will be to build a series of Elements, Bluepints, Options, and RTE Configs. For the purpose of this tutorial, we\u2019ll assume all users can commit directly to the master repository. If you need to set up a respository for collaboration, see Setting up a Theme to work with Gitify .","title":"Working with Gitify and Git"},{"location":"collab/gitify_in_action/#1-push-your-changes-or-pull-the-lastest","text":"It\u2019s critical to make sure that you don\u2019t lose work when collaborating with a team. To prevent accidental overwrites, always perform the following before pulling from or pushing to the orign repository. cd ~/www gitify extract git status The gitify extract command will sycn your current Fred Theme to the filesystem. The git status command will tell you if you have changes that need to be committed.","title":"1. Push your Changes or Pull the Lastest"},{"location":"collab/gitify_in_action/#2-commit-changes-to-your-local-repo","text":"This step and step 4 below can be skipped if ther are no changes to commit. If you do have changes, first commit them to your local repository before continuing: git add --all # or git add on files you want to commit git commit -m \"Your commit message here\" # please write your own message","title":"2. Commit changes to your local repo"},{"location":"collab/gitify_in_action/#3-pull-the-latest-contributions-from-your-collaborators","text":"Now it is time to sync all the latest updates from the upstream origin repository. From webroot, enter the following command: git pull origin master This may result in conflicts that will be noted. If there are conflicts, they must be resolved before you can continue. A conflict happens when two people change the same line of code. For information on resolving conflicts, please see Github\u2019s guide to resolving conflicts . Once you resolve conflicts, or after you have pulled from the origin, build the changes and make sure everything is functioning as expected in MODX: gitify package:install --all gitify build","title":"3. Pull the latest contributions from your collaborators"},{"location":"collab/gitify_in_action/#4-push-your-changes-to-the-origin-repository-to-share-with-collaborators","text":"If you are only pulling remote changes, skip this step as in step 2 above. Now you can safely push your changes. You\u2019ll see messages about Extracting various Fred-related things. If you delay pushing your changes, you may see an error message about (new) conflicts due to other collaborators pushing changes before you: git push origin master You have now successfully worked with a team to build a theme. If you need to collaborate using PRs, like for the Fred Starter Theme available as a demo from MODX, please see the Pull Request Git Workflow guide.","title":"4. Push your changes to the origin repository to share with collaborators"},{"location":"collab/initial_extract/","text":"Setting up a Theme to work with Gitify Start by clicking the green New button when signed into Github. Give your new repository a name and description. This will be the source \u201corigin\u201d for collaborators. You should not initialize the repository with a README file because one will be added by the Theme later. Note the URL for this project, by clicking the down-arrow on the green Clone or download button and choose the SSH URL, like git@github.com:your_name/example_theme.git . Connect to your Theme MODX project SSH into your Cloud, and switch to the www/ webroot directory. Then initialize git with the following command, using the SSH URL from above: git init git remote add origin git@github.com:your_name/example_theme.git Git Ignore Create a .gitingnore file to exclude MODX and other files that are not needed with the following content. Make sure to change !/assets/themes/{{your-theme-name}} to its actual name like !/assets/themes/lightcoral : # MODX & Gitify # ################# /_backup /config.core.php /connectors /core /ht.access /index.php /manager /assets/* !/assets/themes/{{your-theme-name}} # IDE files (optional or add more # ################################### .idea .vscode .settings nbproject .project # OS generated files (optional) # ################################# .DS_Store .DS_Store? ._* .Spotlight-V100 .Trashes ehthumbs.db Thumbs.db node_modules npm-debug.log .sass-cache The Gitify YAML configruation Create a yaml file named .gitify file in the webroot directory with following content: data_directory: _data/ backup_directory: _backup/ data: fred_themes: class: FredTheme primary: id exclude_keys: ['config'] package: fred fred_element_categories: class: FredElementCategory primary: id fred_element_option_sets: class: FredElementOptionSet primary: id extension: .json fred_element_rte_configs: class: FredElementRTEConfig primary: id extension: .json fred_elements: class: FredElement primary: id extension: .html fred_blueprint_categories: class: FredBlueprintCategory primary: id fred_blueprints: class: FredBlueprint primary: id extension: .json This will instruct Gitify to include all Elements and categories, their Option Sets, public Blueprints and categories, RTE configs, and the Themes. Media sources are not currently supported for Theme exports and are therefore omitted. Intial Commit Now it\u2019s time to push the code to the source repo. Once you\u2019ve reached a point where you are ready to share and collaborate on a theme, execute the following: cd ~/www gitify extract git add --all # or git add on files you want to commit git commit -m \"Initalize My Awesome Theme\" # please write your own message git push origin master Now you are ready to start working with others .","title":"Getting your Theme in Git"},{"location":"collab/initial_extract/#setting-up-a-theme-to-work-with-gitify","text":"Start by clicking the green New button when signed into Github. Give your new repository a name and description. This will be the source \u201corigin\u201d for collaborators. You should not initialize the repository with a README file because one will be added by the Theme later. Note the URL for this project, by clicking the down-arrow on the green Clone or download button and choose the SSH URL, like git@github.com:your_name/example_theme.git .","title":"Setting up a Theme to work with Gitify"},{"location":"collab/initial_extract/#connect-to-your-theme-modx-project","text":"SSH into your Cloud, and switch to the www/ webroot directory. Then initialize git with the following command, using the SSH URL from above: git init git remote add origin git@github.com:your_name/example_theme.git","title":"Connect to your Theme MODX project"},{"location":"collab/initial_extract/#git-ignore","text":"Create a .gitingnore file to exclude MODX and other files that are not needed with the following content. Make sure to change !/assets/themes/{{your-theme-name}} to its actual name like !/assets/themes/lightcoral : # MODX & Gitify # ################# /_backup /config.core.php /connectors /core /ht.access /index.php /manager /assets/* !/assets/themes/{{your-theme-name}} # IDE files (optional or add more # ################################### .idea .vscode .settings nbproject .project # OS generated files (optional) # ################################# .DS_Store .DS_Store? ._* .Spotlight-V100 .Trashes ehthumbs.db Thumbs.db node_modules npm-debug.log .sass-cache","title":"Git Ignore"},{"location":"collab/initial_extract/#the-gitify-yaml-configruation","text":"Create a yaml file named .gitify file in the webroot directory with following content: data_directory: _data/ backup_directory: _backup/ data: fred_themes: class: FredTheme primary: id exclude_keys: ['config'] package: fred fred_element_categories: class: FredElementCategory primary: id fred_element_option_sets: class: FredElementOptionSet primary: id extension: .json fred_element_rte_configs: class: FredElementRTEConfig primary: id extension: .json fred_elements: class: FredElement primary: id extension: .html fred_blueprint_categories: class: FredBlueprintCategory primary: id fred_blueprints: class: FredBlueprint primary: id extension: .json This will instruct Gitify to include all Elements and categories, their Option Sets, public Blueprints and categories, RTE configs, and the Themes. Media sources are not currently supported for Theme exports and are therefore omitted.","title":"The Gitify YAML configruation"},{"location":"collab/initial_extract/#intial-commit","text":"Now it\u2019s time to push the code to the source repo. Once you\u2019ve reached a point where you are ready to share and collaborate on a theme, execute the following: cd ~/www gitify extract git add --all # or git add on files you want to commit git commit -m \"Initalize My Awesome Theme\" # please write your own message git push origin master Now you are ready to start working with others .","title":"Intial Commit"},{"location":"collab/pr_workflow/","text":"Using Gitify to Collaborate with Pull Requests Some projects will require you to submit a Pull Request (PR) to their repository. You do this by forking the repo, making changes in a feature branch in your fork, then submitting the PR to the original project. For the purpose of this tutorial, we\u2019ll fork the Fred Starter Theme which is intended to be a Bootstrap 4 quickstart for theme builders. Start by signing into Github. Fork and clone to a MODX instance To start with PRs, you need to fork a repository and work on feature branches before you can submit PRs successfully. 1. Fork a repository Fork the repository you wish to contribute to on Github: For example, visit the Fred Theme Starter and click the fork button in the upper right. Click the down-arrow on the green Clone or download button on a source Github project and copy the HTTPS URL which looks like https://github.com/modxcms/fred-theme-starter.git for use later. You\u2019ll also need your fork\u2019s SSH URL, found in the same location, for example git@github.com:your_username/your-fork-name.git . 2. Clone your fork to your MODX instance Because git clone only works in empty directories, we\u2019ll use a temporary tmp/ directory and move the files to the web root when done. Open an SSH connection to your working Cloud instance and execute: cd ~/www git clone git@github.com:your_username/your-fork-name.git tmp This will download the theme repository into a ~/www/tmp/ directory in the Cloud. Next, move the contents of tmp/ to the correct location under www/ : rsync -av ./tmp ./ Make sure the .git/ directory and files are moved under webroot www/ directory. Once you confirm the files and directories are in the right place, go ahead and remove the tmp/ directory with rm -rf ./tmp . 3. Add the upstream remote This is the original project. Use its HTTPS clone URL from step 1 of this tutorial to set the remote upstream: git remote add upstream https://github.com/modxcms/fred-theme-starter.git Working with your fork Syncing is important, but how you sync depends on the state of your work: if you have made changes that have not been pushed, or if you are syncing ahead of starting work (no changes). No changes: Sync the upstream remote to your fork For the purposes of working with PRs, you should never commit directly to your master branch; for more information see the Feature Branches and Pull Requests: Walkthrough and Understanding the GitHub flow guides. Before pushing any work to a feature branch, you should sync your local repository with the upstream. For more information on syncing forks see the Syncing a fork guide: git checkout master git fetch upstream git merge --ff-only upstream/master # only merges if local is clean git push origin master # push to your fork gitify package:install --all gitify build These commands are only needed when there is a differnce between the commit version in the upstream remote and your local fork. It will not hurt to run them every time though. Local changes: Sync the upstream remote to your fork The following commands create your local feature branch, and commits them to the local git repo. cd ~/www git checkout -b my-feature # checkout to a new branch named `my-feature`, # or any other name you decide for your work gitify extract # extract all your local changes git add --all # or git add only specific changed files git commit -m \"My Changes\" # Use a more reasonable commit message Next, we sync upstream master branch with your fork. git checkout master git fetch upstream git merge --ff-only upstream/master git push origin master Now, we sync the feature branch with any changes from the master branch of the fork from the previous merge step. git checkout my-feature # checkout your `my-feature` branch again git rebase master # this pulls from your forked master``` This may result in conflicts that will be noted. If there are conflicts, they must be resolved before you can continue. A conflict happens when two people change the same line of code. For information on resolving conflicts, please see Github\u2019s guide to resolving conflicts . Finally, we build all the changes into your working MODX instance with Gitify. gitify package:install --all gitify build Double check to make sure the Theme and the changes still work as expected. Then commit them to your Github fork, where it can then be submitted as a PR to the original upstream project: git push origin my-feature # push to your `my-feature` branch on Github to # submit as a PR, per the next section below git checkout master # return to the master branch to start your next gitify package:install --all # restore the `master` state to your local MODX gitify build Now submit the PR to the upstream project. Submit a PR to the upstream project Open your fork on Github. There should be a notification about creating a PR from newly created branch. Click that and submit the PR to the appropriate branch, most likely master or as specified in the original repository README.","title":"Advaced Gitify with PRs"},{"location":"collab/pr_workflow/#using-gitify-to-collaborate-with-pull-requests","text":"Some projects will require you to submit a Pull Request (PR) to their repository. You do this by forking the repo, making changes in a feature branch in your fork, then submitting the PR to the original project. For the purpose of this tutorial, we\u2019ll fork the Fred Starter Theme which is intended to be a Bootstrap 4 quickstart for theme builders. Start by signing into Github.","title":"Using Gitify to Collaborate with Pull Requests"},{"location":"collab/pr_workflow/#fork-and-clone-to-a-modx-instance","text":"To start with PRs, you need to fork a repository and work on feature branches before you can submit PRs successfully.","title":"Fork and clone to a MODX instance"},{"location":"collab/pr_workflow/#1-fork-a-repository","text":"Fork the repository you wish to contribute to on Github: For example, visit the Fred Theme Starter and click the fork button in the upper right. Click the down-arrow on the green Clone or download button on a source Github project and copy the HTTPS URL which looks like https://github.com/modxcms/fred-theme-starter.git for use later. You\u2019ll also need your fork\u2019s SSH URL, found in the same location, for example git@github.com:your_username/your-fork-name.git .","title":"1. Fork a repository"},{"location":"collab/pr_workflow/#2-clone-your-fork-to-your-modx-instance","text":"Because git clone only works in empty directories, we\u2019ll use a temporary tmp/ directory and move the files to the web root when done. Open an SSH connection to your working Cloud instance and execute: cd ~/www git clone git@github.com:your_username/your-fork-name.git tmp This will download the theme repository into a ~/www/tmp/ directory in the Cloud. Next, move the contents of tmp/ to the correct location under www/ : rsync -av ./tmp ./ Make sure the .git/ directory and files are moved under webroot www/ directory. Once you confirm the files and directories are in the right place, go ahead and remove the tmp/ directory with rm -rf ./tmp .","title":"2. Clone your fork to your MODX instance"},{"location":"collab/pr_workflow/#3-add-the-upstream-remote","text":"This is the original project. Use its HTTPS clone URL from step 1 of this tutorial to set the remote upstream: git remote add upstream https://github.com/modxcms/fred-theme-starter.git","title":"3. Add the upstream remote"},{"location":"collab/pr_workflow/#working-with-your-fork","text":"Syncing is important, but how you sync depends on the state of your work: if you have made changes that have not been pushed, or if you are syncing ahead of starting work (no changes).","title":"Working with your fork"},{"location":"collab/pr_workflow/#no-changes-sync-the-upstream-remote-to-your-fork","text":"For the purposes of working with PRs, you should never commit directly to your master branch; for more information see the Feature Branches and Pull Requests: Walkthrough and Understanding the GitHub flow guides. Before pushing any work to a feature branch, you should sync your local repository with the upstream. For more information on syncing forks see the Syncing a fork guide: git checkout master git fetch upstream git merge --ff-only upstream/master # only merges if local is clean git push origin master # push to your fork gitify package:install --all gitify build These commands are only needed when there is a differnce between the commit version in the upstream remote and your local fork. It will not hurt to run them every time though.","title":"No changes: Sync the upstream remote to your fork"},{"location":"collab/pr_workflow/#local-changes-sync-the-upstream-remote-to-your-fork","text":"The following commands create your local feature branch, and commits them to the local git repo. cd ~/www git checkout -b my-feature # checkout to a new branch named `my-feature`, # or any other name you decide for your work gitify extract # extract all your local changes git add --all # or git add only specific changed files git commit -m \"My Changes\" # Use a more reasonable commit message Next, we sync upstream master branch with your fork. git checkout master git fetch upstream git merge --ff-only upstream/master git push origin master Now, we sync the feature branch with any changes from the master branch of the fork from the previous merge step. git checkout my-feature # checkout your `my-feature` branch again git rebase master # this pulls from your forked master``` This may result in conflicts that will be noted. If there are conflicts, they must be resolved before you can continue. A conflict happens when two people change the same line of code. For information on resolving conflicts, please see Github\u2019s guide to resolving conflicts . Finally, we build all the changes into your working MODX instance with Gitify. gitify package:install --all gitify build Double check to make sure the Theme and the changes still work as expected. Then commit them to your Github fork, where it can then be submitted as a PR to the original upstream project: git push origin my-feature # push to your `my-feature` branch on Github to # submit as a PR, per the next section below git checkout master # return to the master branch to start your next gitify package:install --all # restore the `master` state to your local MODX gitify build Now submit the PR to the upstream project.","title":"Local changes: Sync the upstream remote to your fork"},{"location":"collab/pr_workflow/#submit-a-pr-to-the-upstream-project","text":"Open your fork on Github. There should be a notification about creating a PR from newly created branch. Click that and submit the PR to the appropriate branch, most likely master or as specified in the original repository README.","title":"Submit a PR to the upstream project"},{"location":"developer/","text":"Developing for Fred Fred is maintained at Github , and is an MIT-licensed Open Source project. Issues and Pull Requests to enhance its functionality and to fix bugs are welcome. Developers can also extend Fred by creating Plugins to enhance its functionality. A list of currently know Fred plugins follows: Fred Ace Integration \u2013 Type-ahead code hints for the Fred Manager for Theme developers TinyMCE for Fred \u2013 use TinyMCE to edit rich text in Fred, with per-element editor configurations Font Awesome 5 icon picker \u2013 choose icons found in content using a Font Awesome 5 based icon picker MODX Events The MODX Events allow Fred to interact with and trigger other actions using Fred plugins. Plugins are registered to one or more Events, depending on the functional requirements. Toolbar Plugins You can register additional functionalty for Elements, such as a Google Map Marker picker, with Toolbar Plugins . Sidebar Plugins You can create additional Sidebar functionality, such as a media manager or gallery tool, with Sidebar Plugins .","title":"Intro"},{"location":"developer/#developing-for-fred","text":"Fred is maintained at Github , and is an MIT-licensed Open Source project. Issues and Pull Requests to enhance its functionality and to fix bugs are welcome. Developers can also extend Fred by creating Plugins to enhance its functionality. A list of currently know Fred plugins follows: Fred Ace Integration \u2013 Type-ahead code hints for the Fred Manager for Theme developers TinyMCE for Fred \u2013 use TinyMCE to edit rich text in Fred, with per-element editor configurations Font Awesome 5 icon picker \u2013 choose icons found in content using a Font Awesome 5 based icon picker","title":"Developing for Fred"},{"location":"developer/#modx-events","text":"The MODX Events allow Fred to interact with and trigger other actions using Fred plugins. Plugins are registered to one or more Events, depending on the functional requirements.","title":"MODX Events"},{"location":"developer/#toolbar-plugins","text":"You can register additional functionalty for Elements, such as a Google Map Marker picker, with Toolbar Plugins .","title":"Toolbar Plugins"},{"location":"developer/#sidebar-plugins","text":"You can create additional Sidebar functionality, such as a media manager or gallery tool, with Sidebar Plugins .","title":"Sidebar Plugins"},{"location":"developer/modx_events/","text":"MODX Events FredBeforeRender This event is triggered only on the frontend before Fred is initiated and is used to inject custom plugins to Fred or to load custom JS/CSS files. No parameters are passed to this event, but it expects the output (assigned to $modx->event->_output ) to be in this format: $modx->event->_output = [ 'includes' => $includes, 'beforeRender' => $beforeRender, 'lexicons' => $lexicons, 'modifyPermissions' => $modifyPermissions ]; includes String of HTML markup that will get appended after Fred's CSS & JS file includes. Example $includes = ' <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/tinymce/4.9.2/tinymce.min.js\"></script> '; beforeRender String of JS commands that will get added to Fred's beforeRender function. Could be used to register Fred plugins. Example $beforeRender = ' this.registerRTE(\"TinyMCE\", FredRTETinyMCE); '; lexicons An array of additional lexicons that Fred should load. Example $lexicons = ['fredrtetinymce:default']; modifyPermissions String of JS commands that will get added to Fred's modifyPermissions function where permissions parameter is available as an object of all available permissions for the current user. Example $modifyPermissions = ' permissions.save_document = false; // Disable save for the user permissions.my_plugin_show = true; // Custom permission '; FredOnBeforeFredResourceSave This event is triggered before Fred Resource is saved either from manager or from web. Properties: id (ID of the Resource that's going to be saved) resource (modResource object) FredOnFredResourceSave This event is triggered after the Fred Resource is saved either from manager or from web. Properties: id (ID of the Resource that's going to be saved) resource (modResource object) FredOnFredResourceLoad This event is triggered before the frontend LoadContent endpoint returns data to the browser. Properties: id (ID of the currently loading Resource) resource (modResource object) data (Data that will be returned by the endpoint in a form of stdClass) FredElementFormRender @todo","title":"MODX Events"},{"location":"developer/modx_events/#modx-events","text":"","title":"MODX Events"},{"location":"developer/modx_events/#fredbeforerender","text":"This event is triggered only on the frontend before Fred is initiated and is used to inject custom plugins to Fred or to load custom JS/CSS files. No parameters are passed to this event, but it expects the output (assigned to $modx->event->_output ) to be in this format: $modx->event->_output = [ 'includes' => $includes, 'beforeRender' => $beforeRender, 'lexicons' => $lexicons, 'modifyPermissions' => $modifyPermissions ];","title":"FredBeforeRender"},{"location":"developer/modx_events/#includes","text":"String of HTML markup that will get appended after Fred's CSS & JS file includes.","title":"includes"},{"location":"developer/modx_events/#example","text":"$includes = ' <script type=\"text/javascript\" src=\"https://cdnjs.cloudflare.com/ajax/libs/tinymce/4.9.2/tinymce.min.js\"></script> ';","title":"Example"},{"location":"developer/modx_events/#beforerender","text":"String of JS commands that will get added to Fred's beforeRender function. Could be used to register Fred plugins.","title":"beforeRender"},{"location":"developer/modx_events/#example_1","text":"$beforeRender = ' this.registerRTE(\"TinyMCE\", FredRTETinyMCE); ';","title":"Example"},{"location":"developer/modx_events/#lexicons","text":"An array of additional lexicons that Fred should load.","title":"lexicons"},{"location":"developer/modx_events/#example_2","text":"$lexicons = ['fredrtetinymce:default'];","title":"Example"},{"location":"developer/modx_events/#modifypermissions","text":"String of JS commands that will get added to Fred's modifyPermissions function where permissions parameter is available as an object of all available permissions for the current user.","title":"modifyPermissions"},{"location":"developer/modx_events/#example_3","text":"$modifyPermissions = ' permissions.save_document = false; // Disable save for the user permissions.my_plugin_show = true; // Custom permission ';","title":"Example"},{"location":"developer/modx_events/#fredonbeforefredresourcesave","text":"This event is triggered before Fred Resource is saved either from manager or from web. Properties: id (ID of the Resource that's going to be saved) resource (modResource object)","title":"FredOnBeforeFredResourceSave"},{"location":"developer/modx_events/#fredonfredresourcesave","text":"This event is triggered after the Fred Resource is saved either from manager or from web. Properties: id (ID of the Resource that's going to be saved) resource (modResource object)","title":"FredOnFredResourceSave"},{"location":"developer/modx_events/#fredonfredresourceload","text":"This event is triggered before the frontend LoadContent endpoint returns data to the browser. Properties: id (ID of the currently loading Resource) resource (modResource object) data (Data that will be returned by the endpoint in a form of stdClass)","title":"FredOnFredResourceLoad"},{"location":"developer/modx_events/#fredelementformrender","text":"@todo","title":"FredElementFormRender"},{"location":"developer/sidebar_plugins/","text":"Sidebar Plugins Fred supports adding functionality to the Sidebar by adding Sidebar plugins. Plugins are distributed as MODX Transport Packages, which can be submitted to the MODX Extras repository or uploaded manually from the Installer inside the Manager. You can learn more about how to build Transport Packages in the MODX Documentation, or use a tool like Git Package Management to help create Transport Packages. Init function To initialise your plugin start by creating an init function that will be called by Fred. An init function takes three arguments: fred \u2013 a reference to the main Fred class SidebarPlugin \u2013 the SidebarPlugin class that your plugin has to extend pluginTools \u2013 a set of tools you can use in your Plugin to create content and save data. View the source code on Github for a list of available classes, instances and functions which can be used, including: valueParser \u2013 parses Template Variables (such as {{theme_dir}} ) and replaces them with the correct value based on the given parameters ui \u2013 a set of UI elements and inputs to use, including emitter \u2013 emits or listen for events Modal \u2013 a class to create a modal window fetch \u2013 use to make XHR requests fredConfig \u2013 an instance of fredConfig utilitySidebar \u2013 creates a sidebar, like the one used for Element settings actions - predefined Fred XHR requests Mousetrap - library for keyboard shortcuts The init function must return a class that extends the SidebarPlugin. Example var TestSidebarPluginInit = function(fred, SidebarPlugin, pluginTools) { class TestSidebarPlugin extends SidebarPlugin { static title = 'TestPlugin'; static icon = 'fred--sidebar_more'; static expandable = true; init() { this.content = this.render(); } click() { return this.content; } render () { const moreList = pluginTools.ui.els.dl(); const helpLink = pluginTools.ui.els.a('fred.fe.more.help', 'fred.fe.more.help', 'https://modxcms.github.io/fred/'); helpLink.target = '_blank'; moreList.appendChild(pluginTools.ui.els.dt(helpLink)); return moreList; } } return TestSidebarPlugin; }; This will create an additional sidebar icon before the More item in the sidebar with the same icon as the More item, three dots. Icons & Menus Sidebar icons are dt HTML elements with specific classes. For example, the Settings button from the Sidebar is marked up as follows: <dt class=\"fred--sidebar_page_settings\" tabindex=\"0\" role=\"tab\">Settings</dt> The CSS class fred--sidebar_page_settings determines the appearance of the button. To style a new toolbar icon, you need to target the psuedo element ::before in your plugin\u2019s CSS with inline SVG code for a background image: .fred .fred--sidebar_page_settings:before { background: url(data:image/svg+xml, %3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 \u202635.888-80 80 35.888 80 80 80 80-35.888 80-80z' fill='%23fff'/%3E%3C/svg%3E) center center no-repeat; } Any custom CSS file for your plugin including a custom icon like the above, and other styles needed for the plugin, can be included the same way as the JavaScript file in Register your Plugin step, below. Fred\u2019s default icons are the SVG versions of Font Awesome 5 icons . You can download the SVG of any icon from its detailed page. Menus If your plugin needs a menu similar to the Elements or Settings, they are defined inside the dd HTML elements. For example, the Settings menu begins as follows: <dd> <h3 class=\"\">Settings</h3> <form class=\"fred--page_settings_form\"> <fieldset class=\"\"> <label class=\"\">Page Title<input class=\"\" type=\"text\"></label> \u2026 Sidebar Plugin Order The buttons registered to the sidebar are always added before the More button. If there are multiple Sidebar Plugins registered, they will render in the order of the MODX Plugin\u2019s rank in the MODX Manager. Register your Plugin When you have the init function returning your plugin's class, you need to register it for Fred by creating a MODX Plugin on the [FredBeforeRender](/developer/modx_events#fredbeforerender) event. Include the JS file containing the init function using includes and registering the Plugin using beforeRender . To register the toolbar Plugin, you call the registerSidebarPlugin function from Fred with two arguments: name - a unique name for your plugin. Fred cannot register multiple Plugins with the same name. init function - the TestSidebarPluginInit function we created in Init function step, above Example $includes = ' <script type=\"text/javascript\" src=\"/path/to/plugin/file.js\"></script> <link rel=\"stylesheet\" href=\"/path/to/stylsheet/style.css\" /> '; $beforeRender = ' this.registerSidebarPlugin(\"TestSidebarPlugin\", TestSidebarPluginInit); '; $modx->event->_output = [ 'includes' => $includes, 'beforeRender' => $beforeRender ]; The Plugin class The sample Class in the Init function step above can do much more than just show a link to Help page. In fact, much of Fred's functionality is already coded as Plugins. To review the current Sidebar Plugins for a sense of how to create your own, review the source code on Github . Custom Data Your Plugin can save and load custom data when the page is saved. Be aware, though, that custom data is only saved when a user saves the entire page. To save your plugin's data call pluginTools.fredConfig.setPluginsData('Namespace', 'VariableName', 'Data') . This function takes three arguments: namespace - for most cases, use the Plugin's name or something unique to prevent data from being overwritten by another Plugin name - the name of the variable where you want to save the data value - the actual data to store To load data, call pluginTools.fredConfig.getPluginsData('Namespace', 'VariableName') which takes two arguments: namespace - the same namespace used when calling setPluginsData name - the same name used when calling setPluginsData","title":"Sidebar Plugins"},{"location":"developer/sidebar_plugins/#sidebar-plugins","text":"Fred supports adding functionality to the Sidebar by adding Sidebar plugins. Plugins are distributed as MODX Transport Packages, which can be submitted to the MODX Extras repository or uploaded manually from the Installer inside the Manager. You can learn more about how to build Transport Packages in the MODX Documentation, or use a tool like Git Package Management to help create Transport Packages.","title":"Sidebar Plugins"},{"location":"developer/sidebar_plugins/#init-function","text":"To initialise your plugin start by creating an init function that will be called by Fred. An init function takes three arguments: fred \u2013 a reference to the main Fred class SidebarPlugin \u2013 the SidebarPlugin class that your plugin has to extend pluginTools \u2013 a set of tools you can use in your Plugin to create content and save data. View the source code on Github for a list of available classes, instances and functions which can be used, including: valueParser \u2013 parses Template Variables (such as {{theme_dir}} ) and replaces them with the correct value based on the given parameters ui \u2013 a set of UI elements and inputs to use, including emitter \u2013 emits or listen for events Modal \u2013 a class to create a modal window fetch \u2013 use to make XHR requests fredConfig \u2013 an instance of fredConfig utilitySidebar \u2013 creates a sidebar, like the one used for Element settings actions - predefined Fred XHR requests Mousetrap - library for keyboard shortcuts The init function must return a class that extends the SidebarPlugin.","title":"Init function"},{"location":"developer/sidebar_plugins/#example","text":"var TestSidebarPluginInit = function(fred, SidebarPlugin, pluginTools) { class TestSidebarPlugin extends SidebarPlugin { static title = 'TestPlugin'; static icon = 'fred--sidebar_more'; static expandable = true; init() { this.content = this.render(); } click() { return this.content; } render () { const moreList = pluginTools.ui.els.dl(); const helpLink = pluginTools.ui.els.a('fred.fe.more.help', 'fred.fe.more.help', 'https://modxcms.github.io/fred/'); helpLink.target = '_blank'; moreList.appendChild(pluginTools.ui.els.dt(helpLink)); return moreList; } } return TestSidebarPlugin; }; This will create an additional sidebar icon before the More item in the sidebar with the same icon as the More item, three dots.","title":"Example"},{"location":"developer/sidebar_plugins/#icons-menus","text":"Sidebar icons are dt HTML elements with specific classes. For example, the Settings button from the Sidebar is marked up as follows: <dt class=\"fred--sidebar_page_settings\" tabindex=\"0\" role=\"tab\">Settings</dt> The CSS class fred--sidebar_page_settings determines the appearance of the button. To style a new toolbar icon, you need to target the psuedo element ::before in your plugin\u2019s CSS with inline SVG code for a background image: .fred .fred--sidebar_page_settings:before { background: url(data:image/svg+xml, %3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 \u202635.888-80 80 35.888 80 80 80 80-35.888 80-80z' fill='%23fff'/%3E%3C/svg%3E) center center no-repeat; } Any custom CSS file for your plugin including a custom icon like the above, and other styles needed for the plugin, can be included the same way as the JavaScript file in Register your Plugin step, below. Fred\u2019s default icons are the SVG versions of Font Awesome 5 icons . You can download the SVG of any icon from its detailed page.","title":"Icons &amp; Menus"},{"location":"developer/sidebar_plugins/#menus","text":"If your plugin needs a menu similar to the Elements or Settings, they are defined inside the dd HTML elements. For example, the Settings menu begins as follows: <dd> <h3 class=\"\">Settings</h3> <form class=\"fred--page_settings_form\"> <fieldset class=\"\"> <label class=\"\">Page Title<input class=\"\" type=\"text\"></label> \u2026","title":"Menus"},{"location":"developer/sidebar_plugins/#sidebar-plugin-order","text":"The buttons registered to the sidebar are always added before the More button. If there are multiple Sidebar Plugins registered, they will render in the order of the MODX Plugin\u2019s rank in the MODX Manager.","title":"Sidebar Plugin Order"},{"location":"developer/sidebar_plugins/#register-your-plugin","text":"When you have the init function returning your plugin's class, you need to register it for Fred by creating a MODX Plugin on the [FredBeforeRender](/developer/modx_events#fredbeforerender) event. Include the JS file containing the init function using includes and registering the Plugin using beforeRender . To register the toolbar Plugin, you call the registerSidebarPlugin function from Fred with two arguments: name - a unique name for your plugin. Fred cannot register multiple Plugins with the same name. init function - the TestSidebarPluginInit function we created in Init function step, above","title":"Register your Plugin"},{"location":"developer/sidebar_plugins/#example_1","text":"$includes = ' <script type=\"text/javascript\" src=\"/path/to/plugin/file.js\"></script> <link rel=\"stylesheet\" href=\"/path/to/stylsheet/style.css\" /> '; $beforeRender = ' this.registerSidebarPlugin(\"TestSidebarPlugin\", TestSidebarPluginInit); '; $modx->event->_output = [ 'includes' => $includes, 'beforeRender' => $beforeRender ];","title":"Example"},{"location":"developer/sidebar_plugins/#the-plugin-class","text":"The sample Class in the Init function step above can do much more than just show a link to Help page. In fact, much of Fred's functionality is already coded as Plugins. To review the current Sidebar Plugins for a sense of how to create your own, review the source code on Github .","title":"The Plugin class"},{"location":"developer/sidebar_plugins/#custom-data","text":"Your Plugin can save and load custom data when the page is saved. Be aware, though, that custom data is only saved when a user saves the entire page. To save your plugin's data call pluginTools.fredConfig.setPluginsData('Namespace', 'VariableName', 'Data') . This function takes three arguments: namespace - for most cases, use the Plugin's name or something unique to prevent data from being overwritten by another Plugin name - the name of the variable where you want to save the data value - the actual data to store To load data, call pluginTools.fredConfig.getPluginsData('Namespace', 'VariableName') which takes two arguments: namespace - the same namespace used when calling setPluginsData name - the same name used when calling setPluginsData","title":"Custom Data"},{"location":"developer/toolbar_plugins/","text":"Toolbar Plugins Fred supports adding functionality to individual Elements by registering new buttons in the toolbar above each Element. Plugins are distributed as MODX Transport Packages, which can be submitted to the MODX Extras repository or uploaded manually from the Installer inside the Manager. You can learn more about how to build Transport Packages in the MODX Documentation, or use a tool like Git Package Management to help create Transport Packages. Init function To initialise your plugin start by creating an init function that will be called by Fred. An init function takes three arguments: fred \u2013 a reference to the main Fred class ToolbarPlugin \u2013 the ToolbarPlugin class that your plugin has to extend pluginTools \u2013 a set of tools you can use in your Plugin to create content and save data. View the source code on Github for a list of available classes, instances and functions which can be used, including: valueParser \u2013 parses Template Variables (such as {{theme_dir}} ) and replaces them with the correct value based on the given parameters ui \u2013 a set of UI elements and inputs to use, including emitter \u2013 emits or listen for events Modal \u2013 a class to create a modal window fetch \u2013 use to make XHR requests fredConfig \u2013 an instance of fredConfig utilitySidebar \u2013 creates a sidebar, like the one used for Element settings actions - predefined Fred XHR requests Mousetrap - library for keyboard shortcuts The init function must return a class that extends the ToolbarPlugin. Example var TestToolbarPluginInit = function(fred, ToolbarPlugin, pluginTools) { class TestToolbarPlugin extends ToolbarPlugin { static title = 'Test Plugin'; static icon = 'fred--element-settings'; onClick() { console.log('Test Plugin icon pressed from the toolbar'); }; } return TestToolbarPlugin; }; This will create an additional toolbar icon at the end of the toolbar with the same icon as the Settings icon, a gear. Icons Toolbar icons are button elements with specific classes. For example, the delete button from the toolbar is marked up as follows: <button class=\"fred--trash\" role=\"button\" title=\"Delete\"></button> The CSS class fred--trash determines the appearance of the button. To style a new toolbar icon, you need to target the psuedo element ::before in your plugin\u2019s CSS with inline SVG code for a background image, and a background color. You can optionally have a differnt background color when hovered: .fred--my_plugin_button::before { background-repeat: no-repeat; background-position: center center; background-image: url(\"data:image/svg+xml, %3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512' fill='%23fff'%3E%3Cpath d='M512 144v288c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V144c0-26.5 21.5-48 48-48h88l12.3-32.9c7-18.7 24.9-31.1 44.9-31.1h125.5c20 0 37.9 12.4 44.9 31.1L376 96h88c26.5 0 48 21.5 48 48zM376 288c0-66.2-53.8-120-120-120s-120 53.8-120 120 53.8 120 120 120 120-53.8 120-120zm-32 0c0 48.5-39.5 88-88 88s-88-39.5-88-88 39.5-88 88-88 88 39.5 88 88z'/%3E%3C/svg%3E\"); background-color: #e46363; } .fred--my_plugin_button::before:hover { background-color: #061323; } Any custom CSS file for your plugin including a custom icon like the above, and other styles needed for the plugin, can be included the same way as the JavaScript file in Register your Plugin step, below. Fred\u2019s default icons are the SVG versions of Font Awesome 5 icons . You can download the SVG of any icon from its detailed page. Toolbar Plugin Order The buttons registered to the toolbars are always added after the built-in default buttons. If there are multiple Toolbar Plugins registered, they will render in the order of the MODX Plugin\u2019s rank in the MODX Manager. Limiting Plugins for Elements By default, all Toolbar Plugins will register for every Element. To specify the order and/or omit some plugins, modify an Element\u2019s Option Set setting to either include or exclude specific Fred Plugins with a plugins-include or plugins-exclude attribute. Note: The plugins are unique names of the class created for the plugins. As a general rule, this should match the plugin name used for the MODX Package Provider. If a plugins-include attribute is included, it will ignore any plugins-exclude lines. To include only specific Plugins for an Element, use a plugins-include Options setting: { \"toolbarPluginsInclude\": [\"gallery\",\"mapmarker\"], \"settings\": [ { \u2026 } ] } To exclude one or more specific Plugins on an Element, use a plugins-exclude option: { \"toolbarPluginsExclude\": [\"fredfontawesome5iconeditor\"], \"settings\": [ { \u2026 } ] } To prevent all Plugins from registering on an Element completely, specify an empty array for a plugins-include option: { \"plugins-include\": [], \"settings\": [ { \u2026 } ] } Note: The plugins are unique names of the class created for the plugins. As a general rule, this should match the plugin name used for the MODX Package Provider. If a pluginsInclude attribute is included, it will ignore any pluginsExclude lines. To include only specific Plugins for an Element, use a pluginsInclude Options setting: { \"pluginsInclude\": [\"gallery\",\"mapmarker\"], \"settings\": [ { \u2026 } ] } To exclude one or more specific Plugins on an Element, use a pluginsExclude option: { \"pluginsExclude\": [\"fredfontawesome5iconeditor\"], \"settings\": [ { \u2026 } ] } To prevent all Plugins from registering on an Element completely, specify an empty array for a pluginsInclude option: { \"pluginsInclude\": [], \"settings\": [ { \u2026 } ] } Register your Plugin When you have the init function returning your plugin's class, you need to register it for Fred by creating a MODX Plugin on the [FredBeforeRender](/developer/modx_events#fredbeforerender) event. Include the JS file containing the init function using includes and registering the Plugin using beforeRender . To register the toolbar Plugin, you call the registerToolbarPlugin function from Fred with two arguments: name - a unique name for your plugin. Fred cannot register multiple Plugins with the same name. init function - the TestToolbarPluginInit function we created in Init function step, above Example $includes = ' <script type=\"text/javascript\" src=\"/path/to/plugin/file.js\"></script> <link rel=\"stylesheet\" href=\"/path/to/stylsheet/style.css\" /> '; $beforeRender = ' this.registerToolbarPlugin(\"TestToolbarPlugin\", TestToolbarPluginInit); '; $modx->event->_output = [ 'includes' => $includes, 'beforeRender' => $beforeRender ]; The Plugin class The sample Class in the Init function step above can do much more than just logging to the console via console.log . In fact, much of Fred's functionality is already coded as Plugins. To review the current Toolbar Plugins for a sense of how to create your own, review the source code on Github . Custom Data Your Plugin can save and load custom data when the page is saved. Be aware, though, that custom data is only saved when a user saves the entire page. Element Data Toolbar Plugins typically should affect the Elements on which they act. This data are attached to the Fred element where to toolbar action occurred. To save data, use this.el.setPluginValue('Namespace', 'VariableName', 'Data') . This function takes three arguments: namespace - for most cases, use the Plugin's name or something unique to prevent data from being overwritten by another Plugin name - the name of the variable where you want to save the data value - the actual data to store To load data, use this.el.getPluginValue('Namespace', 'VariableName') which takes two arguments: namespace - the same namespace used when calling setPluginValue name - the same name used when calling setPluginValue Global Data Data assoiated with a Plugin can optionally be saved globally, not attached to a specific Element. To save data this way, call pluginTools.fredConfig.setPluginsData('Namespace', 'VariableName', 'Data') . This function takes same arguments as this.el.setPluginValue . To load global data, call pluginTools.fredConfig.getPluginsData('Namespace', 'VariableName') . This function takes same arguments as this.el.getPluginValue .","title":"Toolbar Plugins"},{"location":"developer/toolbar_plugins/#toolbar-plugins","text":"Fred supports adding functionality to individual Elements by registering new buttons in the toolbar above each Element. Plugins are distributed as MODX Transport Packages, which can be submitted to the MODX Extras repository or uploaded manually from the Installer inside the Manager. You can learn more about how to build Transport Packages in the MODX Documentation, or use a tool like Git Package Management to help create Transport Packages.","title":"Toolbar Plugins"},{"location":"developer/toolbar_plugins/#init-function","text":"To initialise your plugin start by creating an init function that will be called by Fred. An init function takes three arguments: fred \u2013 a reference to the main Fred class ToolbarPlugin \u2013 the ToolbarPlugin class that your plugin has to extend pluginTools \u2013 a set of tools you can use in your Plugin to create content and save data. View the source code on Github for a list of available classes, instances and functions which can be used, including: valueParser \u2013 parses Template Variables (such as {{theme_dir}} ) and replaces them with the correct value based on the given parameters ui \u2013 a set of UI elements and inputs to use, including emitter \u2013 emits or listen for events Modal \u2013 a class to create a modal window fetch \u2013 use to make XHR requests fredConfig \u2013 an instance of fredConfig utilitySidebar \u2013 creates a sidebar, like the one used for Element settings actions - predefined Fred XHR requests Mousetrap - library for keyboard shortcuts The init function must return a class that extends the ToolbarPlugin.","title":"Init function"},{"location":"developer/toolbar_plugins/#example","text":"var TestToolbarPluginInit = function(fred, ToolbarPlugin, pluginTools) { class TestToolbarPlugin extends ToolbarPlugin { static title = 'Test Plugin'; static icon = 'fred--element-settings'; onClick() { console.log('Test Plugin icon pressed from the toolbar'); }; } return TestToolbarPlugin; }; This will create an additional toolbar icon at the end of the toolbar with the same icon as the Settings icon, a gear.","title":"Example"},{"location":"developer/toolbar_plugins/#icons","text":"Toolbar icons are button elements with specific classes. For example, the delete button from the toolbar is marked up as follows: <button class=\"fred--trash\" role=\"button\" title=\"Delete\"></button> The CSS class fred--trash determines the appearance of the button. To style a new toolbar icon, you need to target the psuedo element ::before in your plugin\u2019s CSS with inline SVG code for a background image, and a background color. You can optionally have a differnt background color when hovered: .fred--my_plugin_button::before { background-repeat: no-repeat; background-position: center center; background-image: url(\"data:image/svg+xml, %3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512' fill='%23fff'%3E%3Cpath d='M512 144v288c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V144c0-26.5 21.5-48 48-48h88l12.3-32.9c7-18.7 24.9-31.1 44.9-31.1h125.5c20 0 37.9 12.4 44.9 31.1L376 96h88c26.5 0 48 21.5 48 48zM376 288c0-66.2-53.8-120-120-120s-120 53.8-120 120 53.8 120 120 120 120-53.8 120-120zm-32 0c0 48.5-39.5 88-88 88s-88-39.5-88-88 39.5-88 88-88 88 39.5 88 88z'/%3E%3C/svg%3E\"); background-color: #e46363; } .fred--my_plugin_button::before:hover { background-color: #061323; } Any custom CSS file for your plugin including a custom icon like the above, and other styles needed for the plugin, can be included the same way as the JavaScript file in Register your Plugin step, below. Fred\u2019s default icons are the SVG versions of Font Awesome 5 icons . You can download the SVG of any icon from its detailed page.","title":"Icons"},{"location":"developer/toolbar_plugins/#toolbar-plugin-order","text":"The buttons registered to the toolbars are always added after the built-in default buttons. If there are multiple Toolbar Plugins registered, they will render in the order of the MODX Plugin\u2019s rank in the MODX Manager.","title":"Toolbar Plugin Order"},{"location":"developer/toolbar_plugins/#limiting-plugins-for-elements","text":"By default, all Toolbar Plugins will register for every Element. To specify the order and/or omit some plugins, modify an Element\u2019s Option Set setting to either include or exclude specific Fred Plugins with a plugins-include or plugins-exclude attribute. Note: The plugins are unique names of the class created for the plugins. As a general rule, this should match the plugin name used for the MODX Package Provider. If a plugins-include attribute is included, it will ignore any plugins-exclude lines. To include only specific Plugins for an Element, use a plugins-include Options setting: { \"toolbarPluginsInclude\": [\"gallery\",\"mapmarker\"], \"settings\": [ { \u2026 } ] } To exclude one or more specific Plugins on an Element, use a plugins-exclude option: { \"toolbarPluginsExclude\": [\"fredfontawesome5iconeditor\"], \"settings\": [ { \u2026 } ] } To prevent all Plugins from registering on an Element completely, specify an empty array for a plugins-include option: { \"plugins-include\": [], \"settings\": [ { \u2026 } ] } Note: The plugins are unique names of the class created for the plugins. As a general rule, this should match the plugin name used for the MODX Package Provider. If a pluginsInclude attribute is included, it will ignore any pluginsExclude lines. To include only specific Plugins for an Element, use a pluginsInclude Options setting: { \"pluginsInclude\": [\"gallery\",\"mapmarker\"], \"settings\": [ { \u2026 } ] } To exclude one or more specific Plugins on an Element, use a pluginsExclude option: { \"pluginsExclude\": [\"fredfontawesome5iconeditor\"], \"settings\": [ { \u2026 } ] } To prevent all Plugins from registering on an Element completely, specify an empty array for a pluginsInclude option: { \"pluginsInclude\": [], \"settings\": [ { \u2026 } ] }","title":"Limiting Plugins for Elements"},{"location":"developer/toolbar_plugins/#register-your-plugin","text":"When you have the init function returning your plugin's class, you need to register it for Fred by creating a MODX Plugin on the [FredBeforeRender](/developer/modx_events#fredbeforerender) event. Include the JS file containing the init function using includes and registering the Plugin using beforeRender . To register the toolbar Plugin, you call the registerToolbarPlugin function from Fred with two arguments: name - a unique name for your plugin. Fred cannot register multiple Plugins with the same name. init function - the TestToolbarPluginInit function we created in Init function step, above","title":"Register your Plugin"},{"location":"developer/toolbar_plugins/#example_1","text":"$includes = ' <script type=\"text/javascript\" src=\"/path/to/plugin/file.js\"></script> <link rel=\"stylesheet\" href=\"/path/to/stylsheet/style.css\" /> '; $beforeRender = ' this.registerToolbarPlugin(\"TestToolbarPlugin\", TestToolbarPluginInit); '; $modx->event->_output = [ 'includes' => $includes, 'beforeRender' => $beforeRender ];","title":"Example"},{"location":"developer/toolbar_plugins/#the-plugin-class","text":"The sample Class in the Init function step above can do much more than just logging to the console via console.log . In fact, much of Fred's functionality is already coded as Plugins. To review the current Toolbar Plugins for a sense of how to create your own, review the source code on Github .","title":"The Plugin class"},{"location":"developer/toolbar_plugins/#custom-data","text":"Your Plugin can save and load custom data when the page is saved. Be aware, though, that custom data is only saved when a user saves the entire page.","title":"Custom Data"},{"location":"developer/toolbar_plugins/#element-data","text":"Toolbar Plugins typically should affect the Elements on which they act. This data are attached to the Fred element where to toolbar action occurred. To save data, use this.el.setPluginValue('Namespace', 'VariableName', 'Data') . This function takes three arguments: namespace - for most cases, use the Plugin's name or something unique to prevent data from being overwritten by another Plugin name - the name of the variable where you want to save the data value - the actual data to store To load data, use this.el.getPluginValue('Namespace', 'VariableName') which takes two arguments: namespace - the same namespace used when calling setPluginValue name - the same name used when calling setPluginValue","title":"Element Data"},{"location":"developer/toolbar_plugins/#global-data","text":"Data assoiated with a Plugin can optionally be saved globally, not attached to a specific Element. To save data this way, call pluginTools.fredConfig.setPluginsData('Namespace', 'VariableName', 'Data') . This function takes same arguments as this.el.setPluginValue . To load global data, call pluginTools.fredConfig.getPluginsData('Namespace', 'VariableName') . This function takes same arguments as this.el.getPluginValue .","title":"Global Data"},{"location":"site_admin/acls/howto/","text":"Permissions in Fred When installing Fred the first time, it adds a Fred Admin policy to all contexts for the Administrators User Group. This policy enables any member with a Super User Role full access to Fred both in the Manager and in all front-end Contexts. It also creates a more-limited Fred Editor policy intended for users that do not need to set up Fred. Setting up Fred involves creating new Elements, Option Sets, and other admin functions. Limiting Fred to Specific Contexts By default, the Fred Admin policy applies to all existing Contexts. If you do not need to manage all Contexts with Fred remove this Policy from the Administrators User Group; if you create a new Context that needs to be managed by Fred add this policy to the Administrators Group after creating the Context. To enable Fred for members who are not Administrators Group members, add a Fred Policy to their User Group and to the specific Contexts you wish to be managed by Fred. Manager and Front-end Access Web developers and theme creators use the Fred Extra in the Manager to configure Fred and create Themes. Once a site is set up, however, daily content creation and edits using Fred may not require Manager access. If you wish for users to only work with Fred from the front-end, you need to take two steps: Install the Login Extra to add a front-end login for content authors and editors. Assign one of the Fred Policies to the web or other Contexts. Creating Custom Fred Policies The built-in Fred Policies may not be sufficient for all sites. Fortunately, creating custom Fred Policies is straightforward. In the Manager, select the ACLs menu under the gear icon in the upper right. Click the Access Policies tab. Click the Create Access Policy button, fill the policy name and select Fred as the Policy Template. This Policy Template contains all the possible permissions you need to customize how you configure it for your users. When you save the policy, it appears in the table. Right-click it and select Update Policy from the contextual menu. Enable or disable the permissions by unchecking the ones you wish to restrict from your users.","title":"How To"},{"location":"site_admin/acls/howto/#permissions-in-fred","text":"When installing Fred the first time, it adds a Fred Admin policy to all contexts for the Administrators User Group. This policy enables any member with a Super User Role full access to Fred both in the Manager and in all front-end Contexts. It also creates a more-limited Fred Editor policy intended for users that do not need to set up Fred. Setting up Fred involves creating new Elements, Option Sets, and other admin functions.","title":"Permissions in Fred"},{"location":"site_admin/acls/howto/#limiting-fred-to-specific-contexts","text":"By default, the Fred Admin policy applies to all existing Contexts. If you do not need to manage all Contexts with Fred remove this Policy from the Administrators User Group; if you create a new Context that needs to be managed by Fred add this policy to the Administrators Group after creating the Context. To enable Fred for members who are not Administrators Group members, add a Fred Policy to their User Group and to the specific Contexts you wish to be managed by Fred.","title":"Limiting Fred to Specific Contexts"},{"location":"site_admin/acls/howto/#manager-and-front-end-access","text":"Web developers and theme creators use the Fred Extra in the Manager to configure Fred and create Themes. Once a site is set up, however, daily content creation and edits using Fred may not require Manager access. If you wish for users to only work with Fred from the front-end, you need to take two steps: Install the Login Extra to add a front-end login for content authors and editors. Assign one of the Fred Policies to the web or other Contexts.","title":"Manager and Front-end Access"},{"location":"site_admin/acls/howto/#creating-custom-fred-policies","text":"The built-in Fred Policies may not be sufficient for all sites. Fortunately, creating custom Fred Policies is straightforward. In the Manager, select the ACLs menu under the gear icon in the upper right. Click the Access Policies tab. Click the Create Access Policy button, fill the policy name and select Fred as the Policy Template. This Policy Template contains all the possible permissions you need to customize how you configure it for your users. When you save the policy, it appears in the table. Right-click it and select Update Policy from the contextual menu. Enable or disable the permissions by unchecking the ones you wish to restrict from your users.","title":"Creating Custom Fred Policies"},{"location":"site_admin/acls/permissions/","text":"Permissions The following sections list the permissions available for Fred. The subhead is the permission key used in code, followed by a brief description of where and what those permissions control Most of these permissions can be used both with the mgr context and front-end contexts like web . However there are few that only apply to mgr or front-end contexts. For example, if you apply the fred permission to the mgr Context, users will see the Fred Extra in the Manager. If you apply it to a front-end context, the Fred controls will apear when browsing the site from the front-end (if assigned to a page\u2019s Template). Applying the fred_settings permission to mgr context will do nothing as this permission is only used in front-end to be able to see the Settings tab in the sidebar menu. General Permissions fred View Fred (mgr) (web) fred_settings View the Settings menu in the sidebar (web) fred_settings_advanced View the Advanced Settings under the Settings menu (web) fred_settings_tvs View the TVs section under the Settings menu (web) fred_settings_tags View the Tags section under the Settings menu (web) fred_media_sources View Media Sources (mgr) Element Permissions fred_elements View Elements (mgr) (web) fred_element_save Create/edit/duplicate Elements (mgr) fred_element_delete Delete Elements (mgr) fred_element_front_end_delete Remove Elements from drop zone (web) fred_element_screenshot Take a screenshot to replace the current sidebar preview for Elements (web) fred_element_move Drag and drop Elements into drop zones (web) fred_element_rebuild View the Rebuild tab (mgr) Element Category Permissions fred_element_categories View Fred Element Categories (mgr) fred_element_category_save Create/edit/duplicate Element (mgr) fred_element_category_delete Delete Element Categories (mgr) fred_element_cache_refresh Show refresh cache button in Element's toolbar (web) RTE Config Permissions fred_element_rtes View RTE configs (mgr) fred_element_rte_config_save Create/edit/duplicate RTE configs (mgr) fred_element_rte_config_delete Delete RTE configs (mgr) Option Sets Permissions fred_element_option_sets View Option Sets (mgr) fred_element_option_sets_save Create/edit/duplicate Option Sets (mgr) fred_element_option_sets_delete Delete Option Sets (mgr) Blueprints Permissions fred_blueprints View Blueprints (mgr) (web) fred_blueprints_save Create/edit/duplicate Blueprints (mgr) (web) fred_blueprints_delete Delete Blueprints (mgr) fred_blueprints_create_public Create public Blueprints (mgr) (web) Blueprint Category Permissions fred_blueprint_categories View Blueprint Categories (mgr) fred_blueprint_categories_save Create/edit/duplicate Blueprint Categories (mgr) (web) fred_blueprint_categories_delete Delete Blueprint Categories (mgr) fred_blueprint_categories_create_public Create Public Blueprint Categories (mgr) (web) Theme Permissions fred_themes View the Themes tab (mgr) fred_themes_save Create/edit/duplicate Themes (mgr) fred_themes_delete Delete Themes (mgr) fred_themes_build Build Themes (mgr) Themed Template Permissions fred_themed_templates View Theme/Template assignments (mgr) fred_themed_templates_save Assign/Update Fred Themes to MODX Templates (mgr) fred_themed_templates_delete Unassign Theme from MODX Templates (mgr) MODX Permissions new_document Create new Resources (mgr) (web) new_document_in_root Create Resources in the top-level of web root (mgr) (web) save_document Save Resources (mgr) (web) view_unpublished View unpublished Resources (web) resource_duplicate Duplicate Resources (mgr) (web) publish_document Publish Resources (mgr) (web) unpublish_document Unpublish Resources (mgr) (web) delete_document Delete Resources (mgr) (web) undelete_document Undelete Resources (mgr) (web)","title":"Permissions"},{"location":"site_admin/acls/permissions/#permissions","text":"The following sections list the permissions available for Fred. The subhead is the permission key used in code, followed by a brief description of where and what those permissions control Most of these permissions can be used both with the mgr context and front-end contexts like web . However there are few that only apply to mgr or front-end contexts. For example, if you apply the fred permission to the mgr Context, users will see the Fred Extra in the Manager. If you apply it to a front-end context, the Fred controls will apear when browsing the site from the front-end (if assigned to a page\u2019s Template). Applying the fred_settings permission to mgr context will do nothing as this permission is only used in front-end to be able to see the Settings tab in the sidebar menu.","title":"Permissions"},{"location":"site_admin/acls/permissions/#general-permissions","text":"","title":"General Permissions"},{"location":"site_admin/acls/permissions/#fred","text":"View Fred (mgr) (web)","title":"fred"},{"location":"site_admin/acls/permissions/#fred_settings","text":"View the Settings menu in the sidebar (web)","title":"fred_settings"},{"location":"site_admin/acls/permissions/#fred_settings_advanced","text":"View the Advanced Settings under the Settings menu (web)","title":"fred_settings_advanced"},{"location":"site_admin/acls/permissions/#fred_settings_tvs","text":"View the TVs section under the Settings menu (web)","title":"fred_settings_tvs"},{"location":"site_admin/acls/permissions/#fred_settings_tags","text":"View the Tags section under the Settings menu (web)","title":"fred_settings_tags"},{"location":"site_admin/acls/permissions/#fred_media_sources","text":"View Media Sources (mgr)","title":"fred_media_sources"},{"location":"site_admin/acls/permissions/#element-permissions","text":"","title":"Element Permissions"},{"location":"site_admin/acls/permissions/#fred_elements","text":"View Elements (mgr) (web)","title":"fred_elements"},{"location":"site_admin/acls/permissions/#fred_element_save","text":"Create/edit/duplicate Elements (mgr)","title":"fred_element_save"},{"location":"site_admin/acls/permissions/#fred_element_delete","text":"Delete Elements (mgr)","title":"fred_element_delete"},{"location":"site_admin/acls/permissions/#fred_element_front_end_delete","text":"Remove Elements from drop zone (web)","title":"fred_element_front_end_delete"},{"location":"site_admin/acls/permissions/#fred_element_screenshot","text":"Take a screenshot to replace the current sidebar preview for Elements (web)","title":"fred_element_screenshot"},{"location":"site_admin/acls/permissions/#fred_element_move","text":"Drag and drop Elements into drop zones (web)","title":"fred_element_move"},{"location":"site_admin/acls/permissions/#fred_element_rebuild","text":"View the Rebuild tab (mgr)","title":"fred_element_rebuild"},{"location":"site_admin/acls/permissions/#element-category-permissions","text":"","title":"Element Category Permissions"},{"location":"site_admin/acls/permissions/#fred_element_categories","text":"View Fred Element Categories (mgr)","title":"fred_element_categories"},{"location":"site_admin/acls/permissions/#fred_element_category_save","text":"Create/edit/duplicate Element (mgr)","title":"fred_element_category_save"},{"location":"site_admin/acls/permissions/#fred_element_category_delete","text":"Delete Element Categories (mgr)","title":"fred_element_category_delete"},{"location":"site_admin/acls/permissions/#fred_element_cache_refresh","text":"Show refresh cache button in Element's toolbar (web)","title":"fred_element_cache_refresh"},{"location":"site_admin/acls/permissions/#rte-config-permissions","text":"","title":"RTE Config Permissions"},{"location":"site_admin/acls/permissions/#fred_element_rtes","text":"View RTE configs (mgr)","title":"fred_element_rtes"},{"location":"site_admin/acls/permissions/#fred_element_rte_config_save","text":"Create/edit/duplicate RTE configs (mgr)","title":"fred_element_rte_config_save"},{"location":"site_admin/acls/permissions/#fred_element_rte_config_delete","text":"Delete RTE configs (mgr)","title":"fred_element_rte_config_delete"},{"location":"site_admin/acls/permissions/#option-sets-permissions","text":"","title":"Option Sets Permissions"},{"location":"site_admin/acls/permissions/#fred_element_option_sets","text":"View Option Sets (mgr)","title":"fred_element_option_sets"},{"location":"site_admin/acls/permissions/#fred_element_option_sets_save","text":"Create/edit/duplicate Option Sets (mgr)","title":"fred_element_option_sets_save"},{"location":"site_admin/acls/permissions/#fred_element_option_sets_delete","text":"Delete Option Sets (mgr)","title":"fred_element_option_sets_delete"},{"location":"site_admin/acls/permissions/#blueprints-permissions","text":"","title":"Blueprints Permissions"},{"location":"site_admin/acls/permissions/#fred_blueprints","text":"View Blueprints (mgr) (web)","title":"fred_blueprints"},{"location":"site_admin/acls/permissions/#fred_blueprints_save","text":"Create/edit/duplicate Blueprints (mgr) (web)","title":"fred_blueprints_save"},{"location":"site_admin/acls/permissions/#fred_blueprints_delete","text":"Delete Blueprints (mgr)","title":"fred_blueprints_delete"},{"location":"site_admin/acls/permissions/#fred_blueprints_create_public","text":"Create public Blueprints (mgr) (web)","title":"fred_blueprints_create_public"},{"location":"site_admin/acls/permissions/#blueprint-category-permissions","text":"","title":"Blueprint Category Permissions"},{"location":"site_admin/acls/permissions/#fred_blueprint_categories","text":"View Blueprint Categories (mgr)","title":"fred_blueprint_categories"},{"location":"site_admin/acls/permissions/#fred_blueprint_categories_save","text":"Create/edit/duplicate Blueprint Categories (mgr) (web)","title":"fred_blueprint_categories_save"},{"location":"site_admin/acls/permissions/#fred_blueprint_categories_delete","text":"Delete Blueprint Categories (mgr)","title":"fred_blueprint_categories_delete"},{"location":"site_admin/acls/permissions/#fred_blueprint_categories_create_public","text":"Create Public Blueprint Categories (mgr) (web)","title":"fred_blueprint_categories_create_public"},{"location":"site_admin/acls/permissions/#theme-permissions","text":"","title":"Theme Permissions"},{"location":"site_admin/acls/permissions/#fred_themes","text":"View the Themes tab (mgr)","title":"fred_themes"},{"location":"site_admin/acls/permissions/#fred_themes_save","text":"Create/edit/duplicate Themes (mgr)","title":"fred_themes_save"},{"location":"site_admin/acls/permissions/#fred_themes_delete","text":"Delete Themes (mgr)","title":"fred_themes_delete"},{"location":"site_admin/acls/permissions/#fred_themes_build","text":"Build Themes (mgr)","title":"fred_themes_build"},{"location":"site_admin/acls/permissions/#themed-template-permissions","text":"","title":"Themed Template Permissions"},{"location":"site_admin/acls/permissions/#fred_themed_templates","text":"View Theme/Template assignments (mgr)","title":"fred_themed_templates"},{"location":"site_admin/acls/permissions/#fred_themed_templates_save","text":"Assign/Update Fred Themes to MODX Templates (mgr)","title":"fred_themed_templates_save"},{"location":"site_admin/acls/permissions/#fred_themed_templates_delete","text":"Unassign Theme from MODX Templates (mgr)","title":"fred_themed_templates_delete"},{"location":"site_admin/acls/permissions/#modx-permissions","text":"","title":"MODX Permissions"},{"location":"site_admin/acls/permissions/#new_document","text":"Create new Resources (mgr) (web)","title":"new_document"},{"location":"site_admin/acls/permissions/#new_document_in_root","text":"Create Resources in the top-level of web root (mgr) (web)","title":"new_document_in_root"},{"location":"site_admin/acls/permissions/#save_document","text":"Save Resources (mgr) (web)","title":"save_document"},{"location":"site_admin/acls/permissions/#view_unpublished","text":"View unpublished Resources (web)","title":"view_unpublished"},{"location":"site_admin/acls/permissions/#resource_duplicate","text":"Duplicate Resources (mgr) (web)","title":"resource_duplicate"},{"location":"site_admin/acls/permissions/#publish_document","text":"Publish Resources (mgr) (web)","title":"publish_document"},{"location":"site_admin/acls/permissions/#unpublish_document","text":"Unpublish Resources (mgr) (web)","title":"unpublish_document"},{"location":"site_admin/acls/permissions/#delete_document","text":"Delete Resources (mgr) (web)","title":"delete_document"},{"location":"site_admin/acls/permissions/#undelete_document","text":"Undelete Resources (mgr) (web)","title":"undelete_document"},{"location":"site_admin/acls/policies/","text":"Default Policies Fred Admin This Admin policy has all permissions enabled. Users are not limited in any way when using Fred. Fred Editor A Fred Editor user is able to view Fred and all page settings in the front-end, create and use Elements and Blueprints and create new pages. The complete list of permissions for this Policy: fred fred_settings fred_settings_advanced fred_settings_tags fred_settings_tvs fred_elements fred_element_save fred_element_move fred_element_categories fred_element_category_save fred_blueprints fred_blueprints_save fred_blueprints_create_public fred_blueprint_categories fred_blueprint_categories_save fred_blueprint_categories_create_public fred_themed_templates new_document save_document resource_duplicate view_unpublished delete_document","title":"Default Policies"},{"location":"site_admin/acls/policies/#default-policies","text":"","title":"Default Policies"},{"location":"site_admin/acls/policies/#fred-admin","text":"This Admin policy has all permissions enabled. Users are not limited in any way when using Fred.","title":"Fred Admin"},{"location":"site_admin/acls/policies/#fred-editor","text":"A Fred Editor user is able to view Fred and all page settings in the front-end, create and use Elements and Blueprints and create new pages. The complete list of permissions for this Policy: fred fred_settings fred_settings_advanced fred_settings_tags fred_settings_tvs fred_elements fred_element_save fred_element_move fred_element_categories fred_element_category_save fred_blueprints fred_blueprints_save fred_blueprints_create_public fred_blueprint_categories fred_blueprint_categories_save fred_blueprint_categories_create_public fred_themed_templates new_document save_document resource_duplicate view_unpublished delete_document","title":"Fred Editor"},{"location":"themer/","text":"Creating a Theme for Fred Fred themers should have a basic understanding of MODX, be proficient with HTML/CSS markup for creating Elements, and be able to create valid JSON for Option Sets. Intermediate Fred themers will use Twig to create conditional logic in Elements. This can be used to show or hide things based on the settings of the controls in Option Sets. Advanced Fred themers will need to know Javascript to advanced elements with JS Events . Suggested Workflow The easiest way to familiarize yourself with developing for Fred is to install a Theme, duplicate it, then edit and add to the copy to see how things work. Adding new Options Set controls and exploring using Twig logic for conditional output are likewise great exercises to learn how to create flexible and powerful Themes. We strongly suggest installing the Ace Extra as it gives you a nice code editor interface including warning of invalid JSON and code hints when creating Elements in the Manager. Code Hinting in Fred If you have Ace installed as suggested above, attribute-completion and code hints are available when working in the Manager for Fred by installing the Fred Ace Integration Extra. When creating or editing an Element, start typing data- or fred and the press ctrl+space to show list of all available Fred attributes.","title":"Intro to Fred Themes"},{"location":"themer/#creating-a-theme-for-fred","text":"Fred themers should have a basic understanding of MODX, be proficient with HTML/CSS markup for creating Elements, and be able to create valid JSON for Option Sets. Intermediate Fred themers will use Twig to create conditional logic in Elements. This can be used to show or hide things based on the settings of the controls in Option Sets. Advanced Fred themers will need to know Javascript to advanced elements with JS Events .","title":"Creating a Theme for Fred"},{"location":"themer/#suggested-workflow","text":"The easiest way to familiarize yourself with developing for Fred is to install a Theme, duplicate it, then edit and add to the copy to see how things work. Adding new Options Set controls and exploring using Twig logic for conditional output are likewise great exercises to learn how to create flexible and powerful Themes. We strongly suggest installing the Ace Extra as it gives you a nice code editor interface including warning of invalid JSON and code hints when creating Elements in the Manager.","title":"Suggested Workflow"},{"location":"themer/#code-hinting-in-fred","text":"If you have Ace installed as suggested above, attribute-completion and code hints are available when working in the Manager for Fred by installing the Fred Ace Integration Extra. When creating or editing an Element, start typing data- or fred and the press ctrl+space to show list of all available Fred attributes.","title":"Code Hinting in Fred"},{"location":"themer/convert-to-fred/","text":"Convert an Existing MODX Site to Fred Fred allows you to convert existing standard resources into Fred resources. You can make Fred as open or restricted as you want when it comes to controlling the layout of a page. It is possible to just limit Fred to a set content area, similiar to how you would use an RTE currently. Tips Here are some tips for converting your site to Fred. Default Element When converting existing pages to Fred, you will want to specify a Default Element in the Themes grid, see documentation . Without a default element set, your content will disappear when switching a resource to Fred. The Default Element works by detecting there are no Fred elements currently in place, then selecting the default element and putting any content from the resource into the object specified by the data-fred-name option. Templates Generally, you will want to create a new template or duplicate an existing template when converting content to Fred. This way you can maintain a hybrid and not potentially break content during the transition. Themes One important note about themes is that multiple Templates can be specified per theme, but if a Fred resource is changed to a Template with a different theme, it has the potential to lose its elements. This is because Elements are assigned to a specific theme, so the new theme wouldn't have access to the old elements.","title":"Convert Existing Sites to Fred"},{"location":"themer/convert-to-fred/#convert-an-existing-modx-site-to-fred","text":"Fred allows you to convert existing standard resources into Fred resources. You can make Fred as open or restricted as you want when it comes to controlling the layout of a page. It is possible to just limit Fred to a set content area, similiar to how you would use an RTE currently.","title":"Convert an Existing MODX Site to Fred"},{"location":"themer/convert-to-fred/#tips","text":"Here are some tips for converting your site to Fred.","title":"Tips"},{"location":"themer/convert-to-fred/#default-element","text":"When converting existing pages to Fred, you will want to specify a Default Element in the Themes grid, see documentation . Without a default element set, your content will disappear when switching a resource to Fred. The Default Element works by detecting there are no Fred elements currently in place, then selecting the default element and putting any content from the resource into the object specified by the data-fred-name option.","title":"Default Element"},{"location":"themer/convert-to-fred/#templates","text":"Generally, you will want to create a new template or duplicate an existing template when converting content to Fred. This way you can maintain a hybrid and not potentially break content during the transition.","title":"Templates"},{"location":"themer/convert-to-fred/#themes","text":"One important note about themes is that multiple Templates can be specified per theme, but if a Fred resource is changed to a Template with a different theme, it has the potential to lose its elements. This is because Elements are assigned to a specific theme, so the new theme wouldn't have access to the old elements.","title":"Themes"},{"location":"themer/themes/","text":"Theme Creation Tutorial Once you have created a design you are happy with, it is straightforward to build a Theme to share. To start creating a theme, follow the steps below: Install Fred from MODX.com , the icon picker and TinyMCE RTE Set up a MODX Template with a content Dropzone Assign this Template to a Fred Theme Create Categories for your Fred Elements Create Fred Elements Step 1: Install Fred Fred is available as a transport package. In your MODX installation, go to Extras > Installer and click on the Download Extras button. Search to find bring up Fred. You should also see other Extras listed made for Fred, such as a Font Awesome icon picker and a TinyMCE RTE. If you decide to add these also, follow their setup instructions. After your Fred Extras finish downloading, install them from the Packages grid. Step 2: Set up a Template Fred needs a \u201cdropzone\u201d to know where content can go, indicated by adding a data-fred-dropzone attribute to an HTML entity, often a div tag. For example, where the [[*content]] tag would normally be in a Template, add the following: <div data-fred-dropzone=\"content\"> [[*content]] </div> Note the value of the data-fred-dropzone=\"content\" attribute indicates where to render your content once you save a page in Fred, in this case, the [[*content]] . Fred also supports multiple Dropzones; see the templates documentation for more information. Step 3: Assign a Template to a Fred Theme In the MODX Manager, go to the Extras menu > Fred > Themes tab and switch to Themed Templates sidebar Click the Assign Theme to a Template button Select all Templates you wish to use with this Fred Theme Select the Default Theme Click the Save button In the Manager, Resources that use Templates assigned to a Fred Theme should have an \"Open in Fred\" button. From the front-end, you should see either three icons which launch Fred at the bottom-left of the page or a Fred sidebar. Step 4: Create Categories for Elements Fred organizes Elements using categories. Open the Elements Manager Page from the Extras > Fred > Elements menu, and switch to the Categories tab to create Categories. For example, your categories could look like this (create these for the purpose of this demo): Page Content Intros Text Images Testimonials \u2026 Fred requires at least one Category before creating actual content Element. Step 5: Create your first Elements Fred Elements can be as simple as raw text or more complex like a responsive product catalog detail page. Let\u2019s start by creating a simple heading Element, often the first thing on a page. Switch to the Elements tab in Element\u2019s CMP ( Extras > Fred > Elements ) and click the Create Element button. Fill the name ( H1 Heading ), category ( Blocks ), image ( https://placehold.it/300x150&text=H1+Heading ). Add the following markup: <h1 data-fred-name=\"heading\">H1 Heading</h1> Save this Element, go back to the front-end of your Resource, and refresh the page. Click on the orange Elements stacked boxes icon or the MODX icon in the launcher at the bottom left of the page. In the sidebar Elements tab, you should now see the categories you created earlier in step 4. Hover the Text category to see your freshly created H1 Heading Element and drag it into the empty dropzone. Your browser does not support the video tag. Congratulations, you just added your first Element to a page using Fred! Select the placeholder \u201cHello, world.\u201d text and start typing to edit its content. When hovering over an Element, you\u2019ll see an additional toolbar that lets you duplicate, delete, or move the Element on your page. When you\u2019re happy with the new page title, click the green checkbox button to save. Let\u2019s create another Element for a single paragraph: Create an Element under same category with the name Basic Paragraph , https://placehold.it/600x150&text=A+paragraph+of+text for the image, and <p data-fred-name=\"paragraph\">Your content goes here\u2026</p> for the markup Save this in the Manager From the front-end, reload the page Drag this new Element beneath the previously created title, and drop it in place Change the text and save Your browser does not support the video tag. Exporting a Theme The Fred Manager Extra (aka, 3rd-party Component or 3PC) allows you share your themes with colleagues or to submit it to the MODX Extras repository: Click on the Themes tab. Find the Theme you\u2019d like to share/publish. Right-click on its name and choose the Build theme option. Fill in the details and choose one of the two export options at the bottom. A MODX Installer-ready theme will be saved to your core/packages/ directory as {{theme-name}}.transport.zip file that you can distribute. You can also choose to build and download, which will also save a copy to your downloads directory on your local computer.","title":"Theme Creation Tutorial"},{"location":"themer/themes/#theme-creation-tutorial","text":"Once you have created a design you are happy with, it is straightforward to build a Theme to share. To start creating a theme, follow the steps below: Install Fred from MODX.com , the icon picker and TinyMCE RTE Set up a MODX Template with a content Dropzone Assign this Template to a Fred Theme Create Categories for your Fred Elements Create Fred Elements","title":"Theme Creation Tutorial"},{"location":"themer/themes/#step-1-install-fred","text":"Fred is available as a transport package. In your MODX installation, go to Extras > Installer and click on the Download Extras button. Search to find bring up Fred. You should also see other Extras listed made for Fred, such as a Font Awesome icon picker and a TinyMCE RTE. If you decide to add these also, follow their setup instructions. After your Fred Extras finish downloading, install them from the Packages grid.","title":"Step 1: Install Fred"},{"location":"themer/themes/#step-2-set-up-a-template","text":"Fred needs a \u201cdropzone\u201d to know where content can go, indicated by adding a data-fred-dropzone attribute to an HTML entity, often a div tag. For example, where the [[*content]] tag would normally be in a Template, add the following: <div data-fred-dropzone=\"content\"> [[*content]] </div> Note the value of the data-fred-dropzone=\"content\" attribute indicates where to render your content once you save a page in Fred, in this case, the [[*content]] . Fred also supports multiple Dropzones; see the templates documentation for more information.","title":"Step 2: Set up a Template"},{"location":"themer/themes/#step-3-assign-a-template-to-a-fred-theme","text":"In the MODX Manager, go to the Extras menu > Fred > Themes tab and switch to Themed Templates sidebar Click the Assign Theme to a Template button Select all Templates you wish to use with this Fred Theme Select the Default Theme Click the Save button In the Manager, Resources that use Templates assigned to a Fred Theme should have an \"Open in Fred\" button. From the front-end, you should see either three icons which launch Fred at the bottom-left of the page or a Fred sidebar.","title":"Step 3: Assign a Template to a Fred Theme"},{"location":"themer/themes/#step-4-create-categories-for-elements","text":"Fred organizes Elements using categories. Open the Elements Manager Page from the Extras > Fred > Elements menu, and switch to the Categories tab to create Categories. For example, your categories could look like this (create these for the purpose of this demo): Page Content Intros Text Images Testimonials \u2026 Fred requires at least one Category before creating actual content Element.","title":"Step 4: Create Categories for Elements"},{"location":"themer/themes/#step-5-create-your-first-elements","text":"Fred Elements can be as simple as raw text or more complex like a responsive product catalog detail page. Let\u2019s start by creating a simple heading Element, often the first thing on a page. Switch to the Elements tab in Element\u2019s CMP ( Extras > Fred > Elements ) and click the Create Element button. Fill the name ( H1 Heading ), category ( Blocks ), image ( https://placehold.it/300x150&text=H1+Heading ). Add the following markup: <h1 data-fred-name=\"heading\">H1 Heading</h1> Save this Element, go back to the front-end of your Resource, and refresh the page. Click on the orange Elements stacked boxes icon or the MODX icon in the launcher at the bottom left of the page. In the sidebar Elements tab, you should now see the categories you created earlier in step 4. Hover the Text category to see your freshly created H1 Heading Element and drag it into the empty dropzone. Your browser does not support the video tag. Congratulations, you just added your first Element to a page using Fred! Select the placeholder \u201cHello, world.\u201d text and start typing to edit its content. When hovering over an Element, you\u2019ll see an additional toolbar that lets you duplicate, delete, or move the Element on your page. When you\u2019re happy with the new page title, click the green checkbox button to save. Let\u2019s create another Element for a single paragraph: Create an Element under same category with the name Basic Paragraph , https://placehold.it/600x150&text=A+paragraph+of+text for the image, and <p data-fred-name=\"paragraph\">Your content goes here\u2026</p> for the markup Save this in the Manager From the front-end, reload the page Drag this new Element beneath the previously created title, and drop it in place Change the text and save Your browser does not support the video tag.","title":"Step 5: Create your first Elements"},{"location":"themer/themes/#exporting-a-theme","text":"The Fred Manager Extra (aka, 3rd-party Component or 3PC) allows you share your themes with colleagues or to submit it to the MODX Extras repository: Click on the Themes tab. Find the Theme you\u2019d like to share/publish. Right-click on its name and choose the Build theme option. Fill in the details and choose one of the two export options at the bottom. A MODX Installer-ready theme will be saved to your core/packages/ directory as {{theme-name}}.transport.zip file that you can distribute. You can also choose to build and download, which will also save a copy to your downloads directory on your local computer.","title":"Exporting a Theme"},{"location":"themer/cmp/blueprint_categories/","text":"Blueprints Categories Categories help keep similar items organized. Examples could be: Intro Blocks Galleries Landing Pages Catalog Pages Form Pages Etc. Managing Blueprint Categories Blueprints can be managed from the Manager\u2019s Extras top menu > Fred > Blueprints tab > Blueprint Categories sidebar section. Double-click a value you wish to edit, or click the gear icon to update the Blueprint Category in a modal. To remove a Blueprint Category, click the gear icon, or right-click on the row, and choose the Remove Category icon. WARNING: if you remove a category, all Blueprints attached to it will be removed also, potentially breaking sites.","title":"Blueprint Categories"},{"location":"themer/cmp/blueprint_categories/#blueprints-categories","text":"Categories help keep similar items organized. Examples could be: Intro Blocks Galleries Landing Pages Catalog Pages Form Pages Etc.","title":"Blueprints Categories"},{"location":"themer/cmp/blueprint_categories/#managing-blueprint-categories","text":"Blueprints can be managed from the Manager\u2019s Extras top menu > Fred > Blueprints tab > Blueprint Categories sidebar section. Double-click a value you wish to edit, or click the gear icon to update the Blueprint Category in a modal. To remove a Blueprint Category, click the gear icon, or right-click on the row, and choose the Remove Category icon. WARNING: if you remove a category, all Blueprints attached to it will be removed also, potentially breaking sites.","title":"Managing Blueprint Categories"},{"location":"themer/cmp/blueprints/","text":"Blueprints Blueprints can only be created from the front-end . Theme developers can use Blueprints as sample pages which users in turn use to start building a site more quickly. Blueprints function as a \u201creplace the placeholders\u201d way to create content, comprised of one or more Elements with sample content and images in place. Managing Blueprints Blueprints can be managed from the Manager\u2019s Extras top menu > Fred > Blueprints tab > Blueprints sidebar section. Right-click or click the gear icon to Quick Update the Blueprint in a modal, Update it the page itself, or Remove it to delete it from your Theme.","title":"Blueprints"},{"location":"themer/cmp/blueprints/#blueprints","text":"Blueprints can only be created from the front-end . Theme developers can use Blueprints as sample pages which users in turn use to start building a site more quickly. Blueprints function as a \u201creplace the placeholders\u201d way to create content, comprised of one or more Elements with sample content and images in place.","title":"Blueprints"},{"location":"themer/cmp/blueprints/#managing-blueprints","text":"Blueprints can be managed from the Manager\u2019s Extras top menu > Fred > Blueprints tab > Blueprints sidebar section. Right-click or click the gear icon to Quick Update the Blueprint in a modal, Update it the page itself, or Remove it to delete it from your Theme.","title":"Managing Blueprints"},{"location":"themer/cmp/element_categories/","text":"Element Categories Categories are an organizational strucure for Fred to group items with similar usage. Examples Element categories could be: Headers Page Separators Intro Blocks Galleries Body copy Quotes Forms Etc. Under the Categories leftside tab on main Elements tab you can manage all Categories for Elements in Fred. Please note that if you remove a category, all Elements attached to it will be removed as well, which may break your site.","title":"Element Categories"},{"location":"themer/cmp/element_categories/#element-categories","text":"Categories are an organizational strucure for Fred to group items with similar usage. Examples Element categories could be: Headers Page Separators Intro Blocks Galleries Body copy Quotes Forms Etc. Under the Categories leftside tab on main Elements tab you can manage all Categories for Elements in Fred. Please note that if you remove a category, all Elements attached to it will be removed as well, which may break your site.","title":"Element Categories"},{"location":"themer/cmp/elements/","text":"Elements Elements are the basic building blocks for creating Fred pages. Creating an Element The following are the properties for an Element: Name - Required. What you wish to call the Element. Description - Optional. A brief description for the Element. Image - Required. If you do not specify an image, a default gray box with the Element name will be created for you. Images are used as the sources for dragging and dropping Elements into your Layouts. Category - Required. Which category to place this Element under. Rank - Optional. The order you wish this Element to show in its category. Markup - Optional. HTML + Twig markup for the Element, including Fred-specific attributes which allow you to control things like save targets, visibility when creating or viewing content, etc. Option Set - Optional. Complete Option Set can be selected here Options Override - Optional. Override selected Option Set, or define one time options for this Element Element Preview Images Element Previews are thumbnail images used to drag-and-drop onto pages. You can create your own images/previews/screengrabs for Elements from the back end CMP or from the front end when using Fred. In the Manager CMP, you can upload images using the built-in MODX file manager. By default, the Element\u2019s name centered in a gray box will be created. Users with the \"Take Screenshot\" permission can also create Element previews from the front end. This is useful for creating the exact preview image you want for your theme. The most convenient way is to configure an Element for the preview image then take a screenshot using a built-in utility on your computer. When the screenshot is available in your system clipboard and the Element Preview Image is showing in the sidebar, simply paste to upload and process the image to the appropriate size (540px wide). You can also drag and drop an image from your local computer to the Element\u2019s preview image Or, you can click the Element Preview to upload a new one using your local computer file browser Starting in version 1.2, existing Element Previews will be removed once you replace them. Updating Elements Elements are like master templates which can be updated at any time. When an Element\u2019s markup or option set is updated, all places in a site should update to reflect these changes. To see the updated results, either resave the page, or use the \"Rebuild\" tab in the Fred 3PC.","title":"Elements"},{"location":"themer/cmp/elements/#elements","text":"Elements are the basic building blocks for creating Fred pages.","title":"Elements"},{"location":"themer/cmp/elements/#creating-an-element","text":"The following are the properties for an Element: Name - Required. What you wish to call the Element. Description - Optional. A brief description for the Element. Image - Required. If you do not specify an image, a default gray box with the Element name will be created for you. Images are used as the sources for dragging and dropping Elements into your Layouts. Category - Required. Which category to place this Element under. Rank - Optional. The order you wish this Element to show in its category. Markup - Optional. HTML + Twig markup for the Element, including Fred-specific attributes which allow you to control things like save targets, visibility when creating or viewing content, etc. Option Set - Optional. Complete Option Set can be selected here Options Override - Optional. Override selected Option Set, or define one time options for this Element","title":"Creating an Element"},{"location":"themer/cmp/elements/#element-preview-images","text":"Element Previews are thumbnail images used to drag-and-drop onto pages. You can create your own images/previews/screengrabs for Elements from the back end CMP or from the front end when using Fred. In the Manager CMP, you can upload images using the built-in MODX file manager. By default, the Element\u2019s name centered in a gray box will be created. Users with the \"Take Screenshot\" permission can also create Element previews from the front end. This is useful for creating the exact preview image you want for your theme. The most convenient way is to configure an Element for the preview image then take a screenshot using a built-in utility on your computer. When the screenshot is available in your system clipboard and the Element Preview Image is showing in the sidebar, simply paste to upload and process the image to the appropriate size (540px wide). You can also drag and drop an image from your local computer to the Element\u2019s preview image Or, you can click the Element Preview to upload a new one using your local computer file browser Starting in version 1.2, existing Element Previews will be removed once you replace them.","title":"Element Preview Images"},{"location":"themer/cmp/elements/#updating-elements","text":"Elements are like master templates which can be updated at any time. When an Element\u2019s markup or option set is updated, all places in a site should update to reflect these changes. To see the updated results, either resave the page, or use the \"Rebuild\" tab in the Fred 3PC.","title":"Updating Elements"},{"location":"themer/cmp/media_sources/","text":"Media Sources Like when used in the MODX Manager, Media Sources allow Theme Authors to help site owners keep uploads organized in specific locations for Fred-powered sites. Different Fred Elements that allow uploading images may need to store files in different locations, for example article content vs. catalog images vs. team bio photos. When editing a Media Source, Theme authors must explicitly set Media Sources to be accessible to Fred via the fred toggle; they can optionally be made read-only for Fred, by specifying this in the fredReadOnly toggle. Learn more about Media Sources in the MODX Media Source documentation .","title":"Media Sources"},{"location":"themer/cmp/media_sources/#media-sources","text":"Like when used in the MODX Manager, Media Sources allow Theme Authors to help site owners keep uploads organized in specific locations for Fred-powered sites. Different Fred Elements that allow uploading images may need to store files in different locations, for example article content vs. catalog images vs. team bio photos. When editing a Media Source, Theme authors must explicitly set Media Sources to be accessible to Fred via the fred toggle; they can optionally be made read-only for Fred, by specifying this in the fredReadOnly toggle. Learn more about Media Sources in the MODX Media Source documentation .","title":"Media Sources"},{"location":"themer/cmp/option_sets/","text":"Option Sets Option Sets allow you to create common configurations and frequently used sub-configs (e.g., color swatch pickers or a list of fonts) for use across multiple Elements. Creating Option Set The following are the avaialble Option Set properties: Name - Required, has to be unique Description - Optional Complete - Yes/No flag, if set to Yes, the Option Set will appear in select box when creating/updating Element. Setting it to No is usefull for partial Option Sets for import only purpose. Data - JSON with Element options","title":"Option Sets"},{"location":"themer/cmp/option_sets/#option-sets","text":"Option Sets allow you to create common configurations and frequently used sub-configs (e.g., color swatch pickers or a list of fonts) for use across multiple Elements.","title":"Option Sets"},{"location":"themer/cmp/option_sets/#creating-option-set","text":"The following are the avaialble Option Set properties: Name - Required, has to be unique Description - Optional Complete - Yes/No flag, if set to Yes, the Option Set will appear in select box when creating/updating Element. Setting it to No is usefull for partial Option Sets for import only purpose. Data - JSON with Element options","title":"Creating Option Set"},{"location":"themer/cmp/rebuild/","text":"Rebuild Clicking the rebuild theme button will update all Element instances in all Fred pages with the current version of the Element. It can be thought of as similar to clearing the MODX Cache.","title":"Rebuild"},{"location":"themer/cmp/rebuild/#rebuild","text":"Clicking the rebuild theme button will update all Element instances in all Fred pages with the current version of the Element. It can be thought of as similar to clearing the MODX Cache.","title":"Rebuild"},{"location":"themer/cmp/rte_configs/","text":"Rich Text Editor (RTE) Configs Under the RTE Configs tab you can manage all configuration sets for any installed RTEs. RTE configs must have a unique name, which is used in data-fred-rte-config attribute to determin which RTE to use, if any. Make sure RTE configs are valid JSON; you can use JSON Lint as an external service or the ACE editor MODX Extra which shows invalid JSON in the line-number columns as a white X in a red box. Default Configs If you create a config with a same name as your RTE, for example TinyMCE , this config will be used as a default one, overriding its defaults. To learn more about creating RTE configurations, and to see sample configurations for the TinyMCE for Fred Extra, see the RTE examples documentation. Overriding Default Configs Fred option sets can specify the RTE configuration to use for each Element. In addition, a data-fred-rte-config attribute on an HTML Element with a data-fred-name attribue (as long as data-fred-editable is not set to false) will override both the Default and option set specific settings.","title":"RTE Configs"},{"location":"themer/cmp/rte_configs/#rich-text-editor-rte-configs","text":"Under the RTE Configs tab you can manage all configuration sets for any installed RTEs. RTE configs must have a unique name, which is used in data-fred-rte-config attribute to determin which RTE to use, if any. Make sure RTE configs are valid JSON; you can use JSON Lint as an external service or the ACE editor MODX Extra which shows invalid JSON in the line-number columns as a white X in a red box.","title":"Rich Text Editor (RTE) Configs"},{"location":"themer/cmp/rte_configs/#default-configs","text":"If you create a config with a same name as your RTE, for example TinyMCE , this config will be used as a default one, overriding its defaults. To learn more about creating RTE configurations, and to see sample configurations for the TinyMCE for Fred Extra, see the RTE examples documentation.","title":"Default Configs"},{"location":"themer/cmp/rte_configs/#overriding-default-configs","text":"Fred option sets can specify the RTE configuration to use for each Element. In addition, a data-fred-rte-config attribute on an HTML Element with a data-fred-name attribue (as long as data-fred-editable is not set to false) will override both the Default and option set specific settings.","title":"Overriding Default Configs"},{"location":"themer/cmp/theme_settings_and_resolvers/","text":"Theme Settings, Extract Templates and Resolvers Theme settings and custom resolvers allow you to create more portable and flexible themes that are easier to work with without requiring manual configuration steps. Theme Settings Fred will automatically include all system settings under the theme\u2019s namespace when building a theme. These settings should be prefixed with fred.theme.theme-name , where theme-name is the actual theme name. An example key for a background color in the One Pager demo theme might look like fred.theme.one-pager.bg-color . Every theme includes a fred.theme.theme-name.theme_dir system setting which is created by default. This is for the theme\u2019s web accessible assets such as images and css. Only the system settings for the specific theme being built are included. Make sure they have the correct prefix and are under the correct namespace, otherwise they will be ignored. Extract Template Extract Templates allow you to include specific settings or configuration for Extras used in Themes. They are added in following format: { \"packages\": [], \"vehicles\": [] } The packages is an array of one or more third-party packages to include. The $modx->getService method is called with the following details: name : The name of the package, typically all lowercase class : The name of the service class, often camel case componentName : Optional, defaults to the required name \u2013 the name of the directory inside components/ modelName : Optional, defaults to the required name \u2013 the name of the directory inside model/ settingPrefix : Optional, defaults to the required name \u2013 the prefix for a system setting (if a custom core path is used) The vehicles is a correpsonding array of vehicles that will be exported in the vehicle object format: object : A wrapper containing the following attributes: class : The name of the xPDO class graph : The xPDO graph criteria : Optional, defaults to [] \u2013 the xPDO criteria used to filter the objects to be extracted graphCriteria : Optional, defaults to null \u2013 the xPDO graph criteria attributes : The xPDOTransport attributes Example for MODX Minify { \"packages\": [ { \"name\": \"modxminify\", \"class\": \"modxMinify\" } ], \"vehicles\": [ { \"object\": { \"class\": \"modxMinifyGroup\", \"graph\": { \"File\": [] } }, \"attributes\": { \"preserve_keys\": false, \"update_object\": true, \"unique_key\": \"name\", \"related_objects\": true, \"related_object_attributes\": { \"File\": { \"preserve_keys\": false, \"update_object\": true, \"unique_key\": \"filename\" } } } } ] } Example for Client Config { \"packages\": [ { \"name\": \"clientconfig\", \"class\": \"ClientConfig\" } ], \"vehicles\": [ { \"object\": { \"class\": \"cgGroup\", \"graph\": { \"Settings\": [] } }, \"attributes\": { \"preserve_keys\": false, \"update_object\": true, \"unique_key\": \"label\", \"related_objects\": true, \"related_object_attributes\": { \"Settings\": { \"preserve_keys\": false, \"update_object\": true, \"unique_key\": [ \"key\", \"group\" ] } } } } ] } Resolvers Used by advanced developers, custom PHP resolvers can be executed after a theme is installed as the final step in the install process (or first when uninstalling). An instance of modX is accessible via $transport->xpdo . Resolvers can run when a package is installed, upgraded, or uninstalled using the Packager Installer in the MODX Manager.","title":"Theme Settings, Extract Templates & Resolvers"},{"location":"themer/cmp/theme_settings_and_resolvers/#theme-settings-extract-templates-and-resolvers","text":"Theme settings and custom resolvers allow you to create more portable and flexible themes that are easier to work with without requiring manual configuration steps.","title":"Theme Settings, Extract Templates and Resolvers"},{"location":"themer/cmp/theme_settings_and_resolvers/#theme-settings","text":"Fred will automatically include all system settings under the theme\u2019s namespace when building a theme. These settings should be prefixed with fred.theme.theme-name , where theme-name is the actual theme name. An example key for a background color in the One Pager demo theme might look like fred.theme.one-pager.bg-color . Every theme includes a fred.theme.theme-name.theme_dir system setting which is created by default. This is for the theme\u2019s web accessible assets such as images and css. Only the system settings for the specific theme being built are included. Make sure they have the correct prefix and are under the correct namespace, otherwise they will be ignored.","title":"Theme Settings"},{"location":"themer/cmp/theme_settings_and_resolvers/#extract-template","text":"Extract Templates allow you to include specific settings or configuration for Extras used in Themes. They are added in following format: { \"packages\": [], \"vehicles\": [] } The packages is an array of one or more third-party packages to include. The $modx->getService method is called with the following details: name : The name of the package, typically all lowercase class : The name of the service class, often camel case componentName : Optional, defaults to the required name \u2013 the name of the directory inside components/ modelName : Optional, defaults to the required name \u2013 the name of the directory inside model/ settingPrefix : Optional, defaults to the required name \u2013 the prefix for a system setting (if a custom core path is used) The vehicles is a correpsonding array of vehicles that will be exported in the vehicle object format: object : A wrapper containing the following attributes: class : The name of the xPDO class graph : The xPDO graph criteria : Optional, defaults to [] \u2013 the xPDO criteria used to filter the objects to be extracted graphCriteria : Optional, defaults to null \u2013 the xPDO graph criteria attributes : The xPDOTransport attributes","title":"Extract Template"},{"location":"themer/cmp/theme_settings_and_resolvers/#example-for-modx-minify","text":"{ \"packages\": [ { \"name\": \"modxminify\", \"class\": \"modxMinify\" } ], \"vehicles\": [ { \"object\": { \"class\": \"modxMinifyGroup\", \"graph\": { \"File\": [] } }, \"attributes\": { \"preserve_keys\": false, \"update_object\": true, \"unique_key\": \"name\", \"related_objects\": true, \"related_object_attributes\": { \"File\": { \"preserve_keys\": false, \"update_object\": true, \"unique_key\": \"filename\" } } } } ] }","title":"Example for MODX Minify"},{"location":"themer/cmp/theme_settings_and_resolvers/#example-for-client-config","text":"{ \"packages\": [ { \"name\": \"clientconfig\", \"class\": \"ClientConfig\" } ], \"vehicles\": [ { \"object\": { \"class\": \"cgGroup\", \"graph\": { \"Settings\": [] } }, \"attributes\": { \"preserve_keys\": false, \"update_object\": true, \"unique_key\": \"label\", \"related_objects\": true, \"related_object_attributes\": { \"Settings\": { \"preserve_keys\": false, \"update_object\": true, \"unique_key\": [ \"key\", \"group\" ] } } } } ] }","title":"Example for Client Config"},{"location":"themer/cmp/theme_settings_and_resolvers/#resolvers","text":"Used by advanced developers, custom PHP resolvers can be executed after a theme is installed as the final step in the install process (or first when uninstalling). An instance of modX is accessible via $transport->xpdo . Resolvers can run when a package is installed, upgraded, or uninstalled using the Packager Installer in the MODX Manager.","title":"Resolvers"},{"location":"themer/cmp/themed_templates/","text":"Themed Tempaltes Fred works by assigning Templates to Fred themes. If a page in a MODX site uses a template which is assigned to a Fred Theme, it will show Fred controls when working from the front-end and logged into the MODX Manager. A MODX Template can only be assigned to a single Fred Theme.","title":"Themed Templates"},{"location":"themer/cmp/themed_templates/#themed-tempaltes","text":"Fred works by assigning Templates to Fred themes. If a page in a MODX site uses a template which is assigned to a Fred Theme, it will show Fred controls when working from the front-end and logged into the MODX Manager. A MODX Template can only be assigned to a single Fred Theme.","title":"Themed Tempaltes"},{"location":"themer/cmp/themes/","text":"About Fred Themes While most users will typically only have a single theme, you can have many installed in a site. Themes include all the things needed to create a site except example pages (caveat: see Blueprints below). Being able to have multiple Themes allows Theme Builders to create and release a variety themes that share common options (Option sets) across Elements. What makes up a Theme Themes are made of of multple things: About Fred Themes What makes up a Theme Default Element Elements Blueprints Templates and TVs Categories Extras Assets License, Changelog and Readme Files Build a Theme to Share When you create a Theme, Fred will automatically create a directory named for the theme in assets/themes/{{theme-name}} . Use this to store all your theme-specific assets like images, css, fonts and javascript. IMPORTANT NOTE: As of 1.0, Fred currently does not support exporting Media Sources. If you have used them in your Theme, please include instructions on setting them up in your README file. Default Element The default element setting allows you to chose a default Fred Element and target area for placing the content on existing documents. The setting is formatted as ID|target where ID is the identification number of the Fred Element and the target is the HTML object within containing a data-fred-name attribute. This is useful for converting a standard resource to Fred, as it will place the existing content in the default element. If you aren't finding the identification number of the Fred Element, right-click on the top of the element grid and make sure the ID column is selected. Elements A Theme Builder will automatically include all Element Categories attached to the Theme with all their Elements . All Option Sets and RTE Configs attached to the Theme will be also included. Blueprints A Theme Builder will automatically include public Blueprint Categories attached to the THeme with all their public Blueprints . Templates and TVs A Theme Builder will include all MODX Templates assigned to the Theme. Any TVs assigned to those MODX Templates will also be included. Categories A User can select any root MODX Category to be included with the Theme. The Theme Builder will then include all child categories, snippets, chunks and plugins assigned to the root or child category. Extras Extras are MODX packages required for your theme to be fully functional. User will need to install all of the listed extras, before he can proceed with installing your Theme. Fred itself will always be a dependency and is included by default. Assets Theme-specific assets like CSS/SASS/SCSS, images, JS and other similar files are packed into each theme in the assets/theme/{{your-theme-name}} directory. License, Changelog and Readme Files These files show when you are installing the Extra from the MODX Package Manager. Build a Theme to Share The Fred Manager Extra (aka, 3rd-party Component or 3PC) allows you share your themes with colleagues or to submit it to the MODX Extras repository: Click on the Themes tab. Find the Theme you\u2019d like to share/publish. Right-click on its name and choose the Build theme option. Fill in the details and choose one of the two export options at the bottom. A MODX Installer-ready theme will be saved to your core/packages/ directory as {{theme-name}}.transport.zip file that you can distribute. You can also choose to build and download, which will also save a copy to your downloads directory on your local computer.","title":"Building Themes"},{"location":"themer/cmp/themes/#about-fred-themes","text":"While most users will typically only have a single theme, you can have many installed in a site. Themes include all the things needed to create a site except example pages (caveat: see Blueprints below). Being able to have multiple Themes allows Theme Builders to create and release a variety themes that share common options (Option sets) across Elements.","title":"About Fred Themes"},{"location":"themer/cmp/themes/#what-makes-up-a-theme","text":"Themes are made of of multple things: About Fred Themes What makes up a Theme Default Element Elements Blueprints Templates and TVs Categories Extras Assets License, Changelog and Readme Files Build a Theme to Share When you create a Theme, Fred will automatically create a directory named for the theme in assets/themes/{{theme-name}} . Use this to store all your theme-specific assets like images, css, fonts and javascript. IMPORTANT NOTE: As of 1.0, Fred currently does not support exporting Media Sources. If you have used them in your Theme, please include instructions on setting them up in your README file.","title":"What makes up a Theme"},{"location":"themer/cmp/themes/#default-element","text":"The default element setting allows you to chose a default Fred Element and target area for placing the content on existing documents. The setting is formatted as ID|target where ID is the identification number of the Fred Element and the target is the HTML object within containing a data-fred-name attribute. This is useful for converting a standard resource to Fred, as it will place the existing content in the default element. If you aren't finding the identification number of the Fred Element, right-click on the top of the element grid and make sure the ID column is selected.","title":"Default Element"},{"location":"themer/cmp/themes/#elements","text":"A Theme Builder will automatically include all Element Categories attached to the Theme with all their Elements . All Option Sets and RTE Configs attached to the Theme will be also included.","title":"Elements"},{"location":"themer/cmp/themes/#blueprints","text":"A Theme Builder will automatically include public Blueprint Categories attached to the THeme with all their public Blueprints .","title":"Blueprints"},{"location":"themer/cmp/themes/#templates-and-tvs","text":"A Theme Builder will include all MODX Templates assigned to the Theme. Any TVs assigned to those MODX Templates will also be included.","title":"Templates and TVs"},{"location":"themer/cmp/themes/#categories","text":"A User can select any root MODX Category to be included with the Theme. The Theme Builder will then include all child categories, snippets, chunks and plugins assigned to the root or child category.","title":"Categories"},{"location":"themer/cmp/themes/#extras","text":"Extras are MODX packages required for your theme to be fully functional. User will need to install all of the listed extras, before he can proceed with installing your Theme. Fred itself will always be a dependency and is included by default.","title":"Extras"},{"location":"themer/cmp/themes/#assets","text":"Theme-specific assets like CSS/SASS/SCSS, images, JS and other similar files are packed into each theme in the assets/theme/{{your-theme-name}} directory.","title":"Assets"},{"location":"themer/cmp/themes/#license-changelog-and-readme-files","text":"These files show when you are installing the Extra from the MODX Package Manager.","title":"License, Changelog and Readme Files"},{"location":"themer/cmp/themes/#build-a-theme-to-share","text":"The Fred Manager Extra (aka, 3rd-party Component or 3PC) allows you share your themes with colleagues or to submit it to the MODX Extras repository: Click on the Themes tab. Find the Theme you\u2019d like to share/publish. Right-click on its name and choose the Build theme option. Fill in the details and choose one of the two export options at the bottom. A MODX Installer-ready theme will be saved to your core/packages/ directory as {{theme-name}}.transport.zip file that you can distribute. You can also choose to build and download, which will also save a copy to your downloads directory on your local computer.","title":"Build a Theme to Share"},{"location":"themer/elements/","text":"Elements Elements are the building blocks or design patterns that you use to create sites and themes. Elements usually include HTML markup and a corresponding group of controls (\u201c Settings \u201d) accessed from the gear icon in the front-end. Elements can include Twig logic in the markup to do things like show or hide parts of a page depending on the conditions you set in the Settings.","title":"Elements"},{"location":"themer/elements/#elements","text":"Elements are the building blocks or design patterns that you use to create sites and themes. Elements usually include HTML markup and a corresponding group of controls (\u201c Settings \u201d) accessed from the gear icon in the front-end. Elements can include Twig logic in the markup to do things like show or hide parts of a page depending on the conditions you set in the Settings.","title":"Elements"},{"location":"themer/elements/attributes/","text":"data-fred-\u2026 Attributes The following are the currently available attributes for Fred Elements. data-fred-dropzone This defines a Drop Zone where Fred Elements can be dragged from the sidebar and dropped into to create pages. This attribute cannot be empty and must be unique within an Element. While you can create an unlimited number of Dropzones, more than a few might become cumbersome and fragile. Good use cases for multiple Dropzones includes alternate layouts like full width, split pages, pages with sidebars, etc. Example <div data-fred-dropzone=\"left\" class=\"left-content\"></div> <div data-fred-dropzone=\"right\" class=\"right-content\"></div> data-fred-name This is a unique name for each Element, the contents of which should be editable. Elements with this attribute will be saved and processed by Fred. By default, Elements with a data-fred-name attribute are automatically editable by end users, unless a contentedtiable=\"false\" is explicitly declared (see next). The value of this attribute has to be unique in each Element, but you can have multiple instances of an Element on the page and different Elements can share common data-fred-name attributes without problem. Note: Because Fred wraps all Elements in a <div> , you cannot currently use Fred to build elements that would break HTML validation such as table rows, list items, definition lists, etc. This will be solved in a future release. Examples <!-- Simple editable paragraph --> <p data-fred-name=\"description\">Default value</p> <!-- Editable image --> <img src=\"http://via.placeholder.com/450x150\" data-fred-name=\"header-image\"> data-fred-editable When set to false the content inside of the HTML Element will not be editable for end users, including any nested Dropzone content. This attribute only works when used with data-fred-name . Example <p data-fred-name=\"description\" data-fred-editable=\"false\" data-fred-target=\"description\">The value from the description field goes here</p> data-fred-attrs Defines other HTML attributes (comma separated) to save with the content of the HTML element where supported by the editor, such as alt and title attributes with images. Example <img src=\"http://via.placeholder.com/450x150\" alt=\"Default Alt\" data-fred-name=\"header-image\" data-fred-attrs=\"alt,title\"> data-fred-render This allows developers to create user-friendly, self-documenting Elements that inform users what they need to do in order to create content. When set to false these Element only appear when Fred is active. Example <p data-fred-render=\"false\" class=\"editor-instructions\">Add a *Link Location* setting for this Element to make a call to action button appear. (This block is only visible when using Fred.)</p> data-fred-target This defines the Resource field or TV in which to store content. Content of the Element will be stored in regular Content field and additionally in the specified target. This attribute can\u2019t be used on a dropzone. Available targets: pagetitle longtitle description introtext menutitle alias Template Variables (TVs) Note: using TV targets only stores in text or textarea inputs only, as the actual data is stored as a JSON object. As such, some TV input types defined in the MODX Manager such as select inputs, Google Map Markers, etc., will not work. All TV names must be prefixed with tv_ in order to save to a TV. Examples <h1 data-fred-name=\"title\" data-fred-target=\"pagetitle\">Default Page Title</h1> <h1 data-fred-name=\"my-tv\" data-fred-target=\"tv_job-title\">Targets the \"job-title\" TV field</h1> data-fred-rte If set to true the Rich Text Editor will be loaded for editing the content inside this Element. Example <div data-fred-name=\"rte-content\" data-fred-rte=\"true\">Default Content</div> data-fred-rte-config This is useful when you need a limited or expanded set of rich text editor controls than provided by the default configuration, allowing you to specify an overriding alternate RTE config than the default RTE config. Example <div data-fred-name=\"rte-content\" data-fred-rte=\"true\" data-fred-rte-config=\"bold-and-italics-only\">The RTE for this content will only show the bold and italics buttons</div> data-fred-media-source This option defines a specific Media Source for Elements, using the names of one or more Media Sources, separated by commas for all file types. Example <a href=\"assets/pdfs/brochure.pdf\" data-fred-name=\"brochure\" data-fred-media-source=\"Assets\">download our brochure</a> data-fred-image-media-source Identical to data-fred-media-source but only for images. Example <img src=\"http://via.placeholder.com/450x150\" data-fred-name=\"header-image\" data-fred-image-media-source=\"Blogs,Images\"> data-fred-block-class Allows you to specify an additional class which is added to the wrapping div.fred--block added around Elements when Fred is loaded. This can be useful when JavaScript libraries or CSS styling techniques require specific wrapper classes. When Fred is not loaded, the attribute will be added to the classes of the element itself. Example Element Markup: <div class=\"image\" data-fred-block-class=\"special-wrapper\"></div> When Fred is loaded, the markup around it will look as follows: <div class=\"fred--block special-wrapper\"> <div class=\"fred--toolbar\">\u2026</div> <div class=\"fred--block_content\" data-fred-element-id=\"5ce33419-44d6-4e30-90db-8c9a62d04763\" data-fred-element-title=\"Image\"> <div class=\"image\"></div> </div> </div> When Fred is not loaded, the processed markup for the element will look as follows: <div class=\"image special-wrapper\"></div> data-fred-class The value of this attribute will be added to class for this element only when Fred is not loaded. Example Element Markup: <div class=\"row\" data-fred-class=\"visible-grid foo\"></div> When Fred is loaded, the class is omitted: <div class=\"row\"> \u2026 </div> When Fred is not loaded, the class is added: <div class=\"row visible-grid foo\"> \u2026 </div> data-fred-bind This allows you to bind the value of another part of the page to another location within one Element. Example Element Markup: <div data-fred-name=\"name\" data-fred-render=\"false\">John Doe</div> <div class=\"modal\"> <div class=\"modal-header\" data-fred-bind=\"name\"></div> <div class=\"modal-content\">Hello there</div> </div> Rendered HTML: <div class=\"modal\"> <div class=\"modal-header\">John Doe</div> <div class=\"modal-content\">Hello there</div> </div> data-fred-on-drop The name of a globally-accessible JavaScript function to be called when the Element is dropped into any Dropzone. The function will receive fredEl as its first attribute. You can use this to trigger a JavaScript function, for example, calling a slider initialise script that you normally have document.ready function call. Without using this attribute, you would need to save and reload the page to initialise the newly dropped slider item. Example <div class=\"clock\" data-fred-on-drop=\"initClock\"> data-fred-on-setting-change The name of a globally-accessible JavaScript function to be called when an Element setting changes. The function will receive fredEl as its first attribute. Example <div class=\"clock\" data-fred-on-setting-change=\"reInitClock\"></div> data-fred-link-type data-fred-link-page Used by the TinyMCE RTE with a data-fred-link-page attribute to create links in the MODX format of [[~2]] . These links are processed into the href target before generating content. Example <a href=\"fred.html\" data-fred-link-type=\"page\" data-fred-link-page=\"2\">Fred</a> data-fred-min-height Applicable for dropzones. When set, the value used in this attribute will be set in the dropzone's style min-height. Example <div data-fred-dropzone=\"content\" data-fred-min-height=\"50px\"></div> data-fred-min-width Applicable for dropzones. When set, the value used in this attribute will be set in the dropzone's style min-width. Example <div data-fred-dropzone=\"content\" data-fred-min-width=\"50px\"></div>","title":"HTML Attributes"},{"location":"themer/elements/attributes/#data-fred-attributes","text":"The following are the currently available attributes for Fred Elements.","title":"data-fred-\u2026 Attributes"},{"location":"themer/elements/attributes/#data-fred-dropzone","text":"This defines a Drop Zone where Fred Elements can be dragged from the sidebar and dropped into to create pages. This attribute cannot be empty and must be unique within an Element. While you can create an unlimited number of Dropzones, more than a few might become cumbersome and fragile. Good use cases for multiple Dropzones includes alternate layouts like full width, split pages, pages with sidebars, etc.","title":"data-fred-dropzone"},{"location":"themer/elements/attributes/#example","text":"<div data-fred-dropzone=\"left\" class=\"left-content\"></div> <div data-fred-dropzone=\"right\" class=\"right-content\"></div>","title":"Example"},{"location":"themer/elements/attributes/#data-fred-name","text":"This is a unique name for each Element, the contents of which should be editable. Elements with this attribute will be saved and processed by Fred. By default, Elements with a data-fred-name attribute are automatically editable by end users, unless a contentedtiable=\"false\" is explicitly declared (see next). The value of this attribute has to be unique in each Element, but you can have multiple instances of an Element on the page and different Elements can share common data-fred-name attributes without problem. Note: Because Fred wraps all Elements in a <div> , you cannot currently use Fred to build elements that would break HTML validation such as table rows, list items, definition lists, etc. This will be solved in a future release.","title":"data-fred-name"},{"location":"themer/elements/attributes/#examples","text":"<!-- Simple editable paragraph --> <p data-fred-name=\"description\">Default value</p> <!-- Editable image --> <img src=\"http://via.placeholder.com/450x150\" data-fred-name=\"header-image\">","title":"Examples"},{"location":"themer/elements/attributes/#data-fred-editable","text":"When set to false the content inside of the HTML Element will not be editable for end users, including any nested Dropzone content. This attribute only works when used with data-fred-name .","title":"data-fred-editable"},{"location":"themer/elements/attributes/#example_1","text":"<p data-fred-name=\"description\" data-fred-editable=\"false\" data-fred-target=\"description\">The value from the description field goes here</p>","title":"Example"},{"location":"themer/elements/attributes/#data-fred-attrs","text":"Defines other HTML attributes (comma separated) to save with the content of the HTML element where supported by the editor, such as alt and title attributes with images.","title":"data-fred-attrs"},{"location":"themer/elements/attributes/#example_2","text":"<img src=\"http://via.placeholder.com/450x150\" alt=\"Default Alt\" data-fred-name=\"header-image\" data-fred-attrs=\"alt,title\">","title":"Example"},{"location":"themer/elements/attributes/#data-fred-render","text":"This allows developers to create user-friendly, self-documenting Elements that inform users what they need to do in order to create content. When set to false these Element only appear when Fred is active.","title":"data-fred-render"},{"location":"themer/elements/attributes/#example_3","text":"<p data-fred-render=\"false\" class=\"editor-instructions\">Add a *Link Location* setting for this Element to make a call to action button appear. (This block is only visible when using Fred.)</p>","title":"Example"},{"location":"themer/elements/attributes/#data-fred-target","text":"This defines the Resource field or TV in which to store content. Content of the Element will be stored in regular Content field and additionally in the specified target. This attribute can\u2019t be used on a dropzone. Available targets: pagetitle longtitle description introtext menutitle alias Template Variables (TVs) Note: using TV targets only stores in text or textarea inputs only, as the actual data is stored as a JSON object. As such, some TV input types defined in the MODX Manager such as select inputs, Google Map Markers, etc., will not work. All TV names must be prefixed with tv_ in order to save to a TV.","title":"data-fred-target"},{"location":"themer/elements/attributes/#examples_1","text":"<h1 data-fred-name=\"title\" data-fred-target=\"pagetitle\">Default Page Title</h1> <h1 data-fred-name=\"my-tv\" data-fred-target=\"tv_job-title\">Targets the \"job-title\" TV field</h1>","title":"Examples"},{"location":"themer/elements/attributes/#data-fred-rte","text":"If set to true the Rich Text Editor will be loaded for editing the content inside this Element.","title":"data-fred-rte"},{"location":"themer/elements/attributes/#example_4","text":"<div data-fred-name=\"rte-content\" data-fred-rte=\"true\">Default Content</div>","title":"Example"},{"location":"themer/elements/attributes/#data-fred-rte-config","text":"This is useful when you need a limited or expanded set of rich text editor controls than provided by the default configuration, allowing you to specify an overriding alternate RTE config than the default RTE config.","title":"data-fred-rte-config"},{"location":"themer/elements/attributes/#example_5","text":"<div data-fred-name=\"rte-content\" data-fred-rte=\"true\" data-fred-rte-config=\"bold-and-italics-only\">The RTE for this content will only show the bold and italics buttons</div>","title":"Example"},{"location":"themer/elements/attributes/#data-fred-media-source","text":"This option defines a specific Media Source for Elements, using the names of one or more Media Sources, separated by commas for all file types.","title":"data-fred-media-source"},{"location":"themer/elements/attributes/#example_6","text":"<a href=\"assets/pdfs/brochure.pdf\" data-fred-name=\"brochure\" data-fred-media-source=\"Assets\">download our brochure</a>","title":"Example"},{"location":"themer/elements/attributes/#data-fred-image-media-source","text":"Identical to data-fred-media-source but only for images.","title":"data-fred-image-media-source"},{"location":"themer/elements/attributes/#example_7","text":"<img src=\"http://via.placeholder.com/450x150\" data-fred-name=\"header-image\" data-fred-image-media-source=\"Blogs,Images\">","title":"Example"},{"location":"themer/elements/attributes/#data-fred-block-class","text":"Allows you to specify an additional class which is added to the wrapping div.fred--block added around Elements when Fred is loaded. This can be useful when JavaScript libraries or CSS styling techniques require specific wrapper classes. When Fred is not loaded, the attribute will be added to the classes of the element itself.","title":"data-fred-block-class"},{"location":"themer/elements/attributes/#example_8","text":"Element Markup: <div class=\"image\" data-fred-block-class=\"special-wrapper\"></div> When Fred is loaded, the markup around it will look as follows: <div class=\"fred--block special-wrapper\"> <div class=\"fred--toolbar\">\u2026</div> <div class=\"fred--block_content\" data-fred-element-id=\"5ce33419-44d6-4e30-90db-8c9a62d04763\" data-fred-element-title=\"Image\"> <div class=\"image\"></div> </div> </div> When Fred is not loaded, the processed markup for the element will look as follows: <div class=\"image special-wrapper\"></div>","title":"Example"},{"location":"themer/elements/attributes/#data-fred-class","text":"The value of this attribute will be added to class for this element only when Fred is not loaded.","title":"data-fred-class"},{"location":"themer/elements/attributes/#example_9","text":"Element Markup: <div class=\"row\" data-fred-class=\"visible-grid foo\"></div> When Fred is loaded, the class is omitted: <div class=\"row\"> \u2026 </div> When Fred is not loaded, the class is added: <div class=\"row visible-grid foo\"> \u2026 </div>","title":"Example"},{"location":"themer/elements/attributes/#data-fred-bind","text":"This allows you to bind the value of another part of the page to another location within one Element.","title":"data-fred-bind"},{"location":"themer/elements/attributes/#example_10","text":"Element Markup: <div data-fred-name=\"name\" data-fred-render=\"false\">John Doe</div> <div class=\"modal\"> <div class=\"modal-header\" data-fred-bind=\"name\"></div> <div class=\"modal-content\">Hello there</div> </div> Rendered HTML: <div class=\"modal\"> <div class=\"modal-header\">John Doe</div> <div class=\"modal-content\">Hello there</div> </div>","title":"Example"},{"location":"themer/elements/attributes/#data-fred-on-drop","text":"The name of a globally-accessible JavaScript function to be called when the Element is dropped into any Dropzone. The function will receive fredEl as its first attribute. You can use this to trigger a JavaScript function, for example, calling a slider initialise script that you normally have document.ready function call. Without using this attribute, you would need to save and reload the page to initialise the newly dropped slider item.","title":"data-fred-on-drop"},{"location":"themer/elements/attributes/#example_11","text":"<div class=\"clock\" data-fred-on-drop=\"initClock\">","title":"Example"},{"location":"themer/elements/attributes/#data-fred-on-setting-change","text":"The name of a globally-accessible JavaScript function to be called when an Element setting changes. The function will receive fredEl as its first attribute.","title":"data-fred-on-setting-change"},{"location":"themer/elements/attributes/#example_12","text":"<div class=\"clock\" data-fred-on-setting-change=\"reInitClock\"></div>","title":"Example"},{"location":"themer/elements/attributes/#data-fred-link-type","text":"","title":"data-fred-link-type"},{"location":"themer/elements/attributes/#data-fred-link-page","text":"Used by the TinyMCE RTE with a data-fred-link-page attribute to create links in the MODX format of [[~2]] . These links are processed into the href target before generating content.","title":"data-fred-link-page"},{"location":"themer/elements/attributes/#example_13","text":"<a href=\"fred.html\" data-fred-link-type=\"page\" data-fred-link-page=\"2\">Fred</a>","title":"Example"},{"location":"themer/elements/attributes/#data-fred-min-height","text":"Applicable for dropzones. When set, the value used in this attribute will be set in the dropzone's style min-height.","title":"data-fred-min-height"},{"location":"themer/elements/attributes/#example_14","text":"<div data-fred-dropzone=\"content\" data-fred-min-height=\"50px\"></div>","title":"Example"},{"location":"themer/elements/attributes/#data-fred-min-width","text":"Applicable for dropzones. When set, the value used in this attribute will be set in the dropzone's style min-width.","title":"data-fred-min-width"},{"location":"themer/elements/attributes/#example_15","text":"<div data-fred-dropzone=\"content\" data-fred-min-width=\"50px\"></div>","title":"Example"},{"location":"themer/elements/js_events/","text":"JavaScript Events FredElementDrop This event will trigger when any Element is dropped to a dropzone. You can access fredEl from the event.detail.fredEl object. Example document.body.addEventListener(\"FredElementDrop\", function(){ $owl(); }); FredElementSettingChange This event will trigger when Element setting on any Element is changed. You can access fredEl from the event.detail.fredEl object. Example document.body.addEventListener(\"FredElementSettingChange\", function(){ $owl(); }); Full Featured Example Here's an example use case of re-applying a jQuery class for a slider when changes are made. Slider Element The slider element will create new or fewer slides based on the number defined in the element's options. Markup <div class=\"col-md-8 owl-init slider-main owl-carousel\"> {% for i in 0..(slides - 1) %} <div class=\"item-slide\"> <div class=\"card-banner\" style=\"height:600px;\"> <div class=\"overlay-cover d-flex align-items-center justify-content-center\"> <div class=\"text-center\"> <h3 data-fred-name=\"slider_header{{i}}\">Default Value {{i+1}}</h3> <p data-fred-name=\"slider_text{{i}}\">This is some default text.</a> </div> </div> </div> </div> {% endfor %} </div> Options { \"settings\": [ { \"name\": \"slides\", \"label\": \"Slides\", \"type\": \"slider\", \"value\": 3, \"min\": 1, \"max\": 6 } ] } Template Script The template will initialize the slider on first load, and re-initialize when the element is dropped or altered. <link rel=\"stylesheet\" href=\"//unpkg.com/owl.carousel/dist/assets/owl.carousel.min.css\" /> <link rel=\"stylesheet\" href=\"//unpkg.com/owl.carousel/dist/assets/owl.theme.default.min.css\" /> <script src=\"//unpkg.com/jquery/dist/jquery.js\"></script> <script src=\"//unpkg.com/owl.carousel/dist/owl.carousel.js\"></script> <script> var $owl = function(){ $('.owl-carousel').owlCarousel({ loop:true, margin:10, nav:true, items:1 }); }; document.body.addEventListener(\"FredElementDrop\", function(){ $owl(); }); document.body.addEventListener(\"FredElementSettingChange\", function(){ $owl(); }); $(document).ready(function(){ $owl(); }); </script>","title":"JS Events"},{"location":"themer/elements/js_events/#javascript-events","text":"","title":"JavaScript Events"},{"location":"themer/elements/js_events/#fredelementdrop","text":"This event will trigger when any Element is dropped to a dropzone. You can access fredEl from the event.detail.fredEl object.","title":"FredElementDrop"},{"location":"themer/elements/js_events/#example","text":"document.body.addEventListener(\"FredElementDrop\", function(){ $owl(); });","title":"Example"},{"location":"themer/elements/js_events/#fredelementsettingchange","text":"This event will trigger when Element setting on any Element is changed. You can access fredEl from the event.detail.fredEl object.","title":"FredElementSettingChange"},{"location":"themer/elements/js_events/#example_1","text":"document.body.addEventListener(\"FredElementSettingChange\", function(){ $owl(); });","title":"Example"},{"location":"themer/elements/js_events/#full-featured-example","text":"Here's an example use case of re-applying a jQuery class for a slider when changes are made.","title":"Full Featured Example"},{"location":"themer/elements/js_events/#slider-element","text":"The slider element will create new or fewer slides based on the number defined in the element's options.","title":"Slider Element"},{"location":"themer/elements/js_events/#markup","text":"<div class=\"col-md-8 owl-init slider-main owl-carousel\"> {% for i in 0..(slides - 1) %} <div class=\"item-slide\"> <div class=\"card-banner\" style=\"height:600px;\"> <div class=\"overlay-cover d-flex align-items-center justify-content-center\"> <div class=\"text-center\"> <h3 data-fred-name=\"slider_header{{i}}\">Default Value {{i+1}}</h3> <p data-fred-name=\"slider_text{{i}}\">This is some default text.</a> </div> </div> </div> </div> {% endfor %} </div>","title":"Markup"},{"location":"themer/elements/js_events/#options","text":"{ \"settings\": [ { \"name\": \"slides\", \"label\": \"Slides\", \"type\": \"slider\", \"value\": 3, \"min\": 1, \"max\": 6 } ] }","title":"Options"},{"location":"themer/elements/js_events/#template-script","text":"The template will initialize the slider on first load, and re-initialize when the element is dropped or altered. <link rel=\"stylesheet\" href=\"//unpkg.com/owl.carousel/dist/assets/owl.carousel.min.css\" /> <link rel=\"stylesheet\" href=\"//unpkg.com/owl.carousel/dist/assets/owl.theme.default.min.css\" /> <script src=\"//unpkg.com/jquery/dist/jquery.js\"></script> <script src=\"//unpkg.com/owl.carousel/dist/owl.carousel.js\"></script> <script> var $owl = function(){ $('.owl-carousel').owlCarousel({ loop:true, margin:10, nav:true, items:1 }); }; document.body.addEventListener(\"FredElementDrop\", function(){ $owl(); }); document.body.addEventListener(\"FredElementSettingChange\", function(){ $owl(); }); $(document).ready(function(){ $owl(); }); </script>","title":"Template Script"},{"location":"themer/elements/markup/","text":"HTML Markup in Fred Elements Fred Elements are made of HTML with specific attributes. The markup can be enhanced using Twig and Element Settings . Custom Tags themplate.theme_dir To make themes more portable {{template.theme_dir}} can be used in an element as a dynamic placeholder reference to the template's theme directory (e.g. '/assets/theme/default/'.) Markup Examples <!-- Simple Element --> <div class=\"panel\"> <p data-fred-name=\"header_text\">Default Value</p> <img src=\"http://via.placeholder.com/450x150\" data-fred-name=\"header_image\"> </div> <!-- Enhanced Element --> <div class=\"panel {{ panel_class }}\"> <p data-fred-name=\"panel_text\">Default Value</p> {% if cta_link %} <a class=\"btn {{ cta_class }}\" href=\"{{ cta_link }}\">{{ cta_text }}</a> {% endif %} </div>","title":"HTML Markup & Twig"},{"location":"themer/elements/markup/#html-markup-in-fred-elements","text":"Fred Elements are made of HTML with specific attributes. The markup can be enhanced using Twig and Element Settings .","title":"HTML Markup in Fred Elements"},{"location":"themer/elements/markup/#custom-tags","text":"","title":"Custom Tags"},{"location":"themer/elements/markup/#themplatetheme_dir","text":"To make themes more portable {{template.theme_dir}} can be used in an element as a dynamic placeholder reference to the template's theme directory (e.g. '/assets/theme/default/'.)","title":"themplate.theme_dir"},{"location":"themer/elements/markup/#markup-examples","text":"<!-- Simple Element --> <div class=\"panel\"> <p data-fred-name=\"header_text\">Default Value</p> <img src=\"http://via.placeholder.com/450x150\" data-fred-name=\"header_image\"> </div> <!-- Enhanced Element --> <div class=\"panel {{ panel_class }}\"> <p data-fred-name=\"panel_text\">Default Value</p> {% if cta_link %} <a class=\"btn {{ cta_class }}\" href=\"{{ cta_link }}\">{{ cta_text }}</a> {% endif %} </div>","title":"Markup Examples"},{"location":"themer/media_sources/","text":"Media Sources can either be assigned globally via a setting in the Media Source itself, or in an Element\u2019s settings by referencing the Media Source Name(s). On install two new settings are added to each Media Source. If you'll want to access Media Sources from Fred, you will need to manually add these settings. NOTE: Fred does not currently check a specific user\u2019s Media Source permissions, and only reviews the following permissions. Media Source Settings fred A Yes/No setting that defines if the Media Source is globally available to Elements rendered in Fred. (defaults to no) fredReadOnly A Yes/No setting that locks a Media Source from being written to. (defaults to no) Element Settings mediaSource ID of the Media Source to use for Finder. Multiple IDs can be passed separated by comma , . imageMediaSource ID of the Media Source to use for Image fields. Multiple IDs can be passed separated by comma , . This option overrides mediaSource .","title":"Media Sources"},{"location":"themer/media_sources/#media-source-settings","text":"","title":"Media Source Settings"},{"location":"themer/media_sources/#fred","text":"A Yes/No setting that defines if the Media Source is globally available to Elements rendered in Fred. (defaults to no)","title":"fred"},{"location":"themer/media_sources/#fredreadonly","text":"A Yes/No setting that locks a Media Source from being written to. (defaults to no)","title":"fredReadOnly"},{"location":"themer/media_sources/#element-settings","text":"","title":"Element Settings"},{"location":"themer/media_sources/#mediasource","text":"ID of the Media Source to use for Finder. Multiple IDs can be passed separated by comma , .","title":"mediaSource"},{"location":"themer/media_sources/#imagemediasource","text":"ID of the Media Source to use for Image fields. Multiple IDs can be passed separated by comma , . This option overrides mediaSource .","title":"imageMediaSource"},{"location":"themer/options/","text":"Options Options are what defines the controls given to end users when configuring Elements. They are defined in a Option Sets that are attached to Elements. Option Sets Option Sets allow you to create Element configuration settings and frequently used sub-sets for use with Elements. Complete Option Sets Option Sets with the complete flag set to Yes can be assigned to individual Element . Option Sets can also be assigned to more than one Element, making it easier to reuse common settings across Elements. Partial Option Sets Option Sets with No in this flag are meant to be imported into other Option Sets. You can use these to define commonly used settings or specific options that will repeat across multiple Option Sets, for example, color swatches, margins and padding, or text style settings. One option set can be used with multiple Elements. If you have frequently used sub-sections of option sets you\u2019d like to share across many option sets, you can use partial option sets. These can then be imported into many other option sets, and are useful for things like color pallets, etc. A variety of option controls/settings give you flexibility in how your end users create and update content. These controls can further be grouped into sub-groups that can be opened/closed for better organization of large option sets. Importing If you use similar Option settings across many sets, you might want to organize them in to partial option sets, and import them to make managing Option Sets more straightforward. Option Overrides On the Fred Manager page for the Create/Edit Element view you can define a unique non-reusable set of controls for the settings. Overrides only affect the current Element and will not affect other Elements using the same Option Set.","title":"Overview"},{"location":"themer/options/#options","text":"Options are what defines the controls given to end users when configuring Elements. They are defined in a Option Sets that are attached to Elements.","title":"Options"},{"location":"themer/options/#option-sets","text":"Option Sets allow you to create Element configuration settings and frequently used sub-sets for use with Elements.","title":"Option Sets"},{"location":"themer/options/#complete-option-sets","text":"Option Sets with the complete flag set to Yes can be assigned to individual Element . Option Sets can also be assigned to more than one Element, making it easier to reuse common settings across Elements.","title":"Complete Option Sets"},{"location":"themer/options/#partial-option-sets","text":"Option Sets with No in this flag are meant to be imported into other Option Sets. You can use these to define commonly used settings or specific options that will repeat across multiple Option Sets, for example, color swatches, margins and padding, or text style settings. One option set can be used with multiple Elements. If you have frequently used sub-sections of option sets you\u2019d like to share across many option sets, you can use partial option sets. These can then be imported into many other option sets, and are useful for things like color pallets, etc. A variety of option controls/settings give you flexibility in how your end users create and update content. These controls can further be grouped into sub-groups that can be opened/closed for better organization of large option sets.","title":"Partial Option Sets"},{"location":"themer/options/#importing","text":"If you use similar Option settings across many sets, you might want to organize them in to partial option sets, and import them to make managing Option Sets more straightforward.","title":"Importing"},{"location":"themer/options/#option-overrides","text":"On the Fred Manager page for the Create/Edit Element view you can define a unique non-reusable set of controls for the settings. Overrides only affect the current Element and will not affect other Elements using the same Option Set.","title":"Option Overrides"},{"location":"themer/options/import/","text":"Importing Partial Option Sets Importing an Option Set is done with a specific with a fred-import key in the JSON import object. Only partial Option Sets can be imported Import only works for Settings The entire import object will be replaced by the Full import The use case for a full import, versus defining a complete Option Set, is if you have a base set of options that are identical across many Elements, including one that only uses the base options. An example of this would be a site that has call to action buttons in many Elements, including one that is just a single CTA button. Full Settings import for a CTA-button-only Element { \"settings\": { \"fred-import\": \"cta_settings\" } } cta_settings partial Option Set [ { \"name\": \"cta_class\", \"label\": \"CTA Class\", \"type\": \"select\", \"options\": { \"danger\": \"Red CTA\", \"info\": \"Blue CTA\", \"default\": \"Default CTA\" }, \"value\": \"default\" }, { \"name\": \"show_cta\", \"label\": \"Show CTA\", \"type\": \"toggle\", \"value\": false } ] Partial import You can import specfic frequently used partial option sub-sets into a Complete Option Set. Complete Option Set Note, the cta_settings import is defined above. { \"settings\": [ { \"name\": \"panel_class\", \"label\": \"Panel Class\", \"type\": \"text\", \"value\": \"\" }, { \"fred-import\": \"cta_settings\" }, { \"fred-import\": \"text_color\" } ] } text_color partial Option Set { \"name\": \"color\", \"label\": \"Text Color\", \"type\": \"colorswatch\", \"value\": \"black\", \"options\": [ { \"value\":\"primary\", \"color\":\"blue\", \"label\":\"Primary\" }, \"lightcoral\", \"black\", \"rgba(0,255,0,.5)\" ] }","title":"Importing into Option Sets"},{"location":"themer/options/import/#importing-partial-option-sets","text":"Importing an Option Set is done with a specific with a fred-import key in the JSON import object. Only partial Option Sets can be imported Import only works for Settings The entire import object will be replaced by the","title":"Importing Partial Option Sets"},{"location":"themer/options/import/#full-import","text":"The use case for a full import, versus defining a complete Option Set, is if you have a base set of options that are identical across many Elements, including one that only uses the base options. An example of this would be a site that has call to action buttons in many Elements, including one that is just a single CTA button.","title":"Full import"},{"location":"themer/options/import/#full-settings-import-for-a-cta-button-only-element","text":"{ \"settings\": { \"fred-import\": \"cta_settings\" } }","title":"Full Settings import for a CTA-button-only Element"},{"location":"themer/options/import/#cta_settings-partial-option-set","text":"[ { \"name\": \"cta_class\", \"label\": \"CTA Class\", \"type\": \"select\", \"options\": { \"danger\": \"Red CTA\", \"info\": \"Blue CTA\", \"default\": \"Default CTA\" }, \"value\": \"default\" }, { \"name\": \"show_cta\", \"label\": \"Show CTA\", \"type\": \"toggle\", \"value\": false } ]","title":"cta_settings partial Option Set"},{"location":"themer/options/import/#partial-import","text":"You can import specfic frequently used partial option sub-sets into a Complete Option Set.","title":"Partial import"},{"location":"themer/options/import/#complete-option-set","text":"Note, the cta_settings import is defined above. { \"settings\": [ { \"name\": \"panel_class\", \"label\": \"Panel Class\", \"type\": \"text\", \"value\": \"\" }, { \"fred-import\": \"cta_settings\" }, { \"fred-import\": \"text_color\" } ] }","title":"Complete Option Set"},{"location":"themer/options/import/#text_color-partial-option-set","text":"{ \"name\": \"color\", \"label\": \"Text Color\", \"type\": \"colorswatch\", \"value\": \"black\", \"options\": [ { \"value\":\"primary\", \"color\":\"blue\", \"label\":\"Primary\" }, \"lightcoral\", \"black\", \"rgba(0,255,0,.5)\" ] }","title":"text_color partial Option Set"},{"location":"themer/options/override/","text":"Overriding Option Sets Use cases for overriding an option set are when you need to change things like switching remote from true to false . You can also use them more extensively like overriding all the Settings for a single Element without maintaining an entierly separate Option Set. Overrides are located on the Overrides tab when editing a specific Element in the Fred Manager page. Note: You must include all settings you want to show as controls in the Override panel. The best way to start your override is by copying the entire settings JSON node by clicking the Preview Option Set button and selecting the JSON object(s) and pasting into the overrides text area. Override specific options These options are only available through override, not when creating Option Set. merge When setting merge to true , the override will get recursively merged to current Option Set. Default value is false . rteConfig You can override or define new RTE Configs through this option. Example Assume you have an Intro plan with a background image and a call to action link. You want a version for both single-page sites with anchor link external URLs on the page, but also one which allows links to other Fred pages on your site. You don't need the scroll-to-link (see below) and you want to change the link object to be a MODX page select list. Original Setting { \"settings\": [ { \"name\": \"image\", \"label\": \"Background Image\", \"type\": \"image\", \"value\": \"assets/themes/starter/img/Fred-hero.jpg\" }, { \"fred-import\": \"background_settings\" }, { \"name\": \"linkscroll\", \"label\": \"Scroll Link\", \"type\": \"toggle\", \"value\": true }, { \"name\": \"link\", \"label\": \"Link anchor or URL\", \"type\": \"text\", \"value\": null } ] } Options Override { \"settings\": [ { \"name\": \"image\", \"label\": \"Background Image\", \"type\": \"image\", \"value\": \"assets/themes/starter/img/Fred-hero.jpg\" }, { \"fred-import\": \"background_settings\" }, { \"name\": \"link\", \"label\": \"Link\", \"type\": \"page\", \"value\": { \"id\": 1, \"url\": \"[[~1]]\" } } ] }","title":"Overriding Option Settingss"},{"location":"themer/options/override/#overriding-option-sets","text":"Use cases for overriding an option set are when you need to change things like switching remote from true to false . You can also use them more extensively like overriding all the Settings for a single Element without maintaining an entierly separate Option Set. Overrides are located on the Overrides tab when editing a specific Element in the Fred Manager page. Note: You must include all settings you want to show as controls in the Override panel. The best way to start your override is by copying the entire settings JSON node by clicking the Preview Option Set button and selecting the JSON object(s) and pasting into the overrides text area.","title":"Overriding Option Sets"},{"location":"themer/options/override/#override-specific-options","text":"These options are only available through override, not when creating Option Set.","title":"Override specific options"},{"location":"themer/options/override/#merge","text":"When setting merge to true , the override will get recursively merged to current Option Set. Default value is false .","title":"merge"},{"location":"themer/options/override/#rteconfig","text":"You can override or define new RTE Configs through this option.","title":"rteConfig"},{"location":"themer/options/override/#example","text":"Assume you have an Intro plan with a background image and a call to action link. You want a version for both single-page sites with anchor link external URLs on the page, but also one which allows links to other Fred pages on your site. You don't need the scroll-to-link (see below) and you want to change the link object to be a MODX page select list.","title":"Example"},{"location":"themer/options/override/#original-setting","text":"{ \"settings\": [ { \"name\": \"image\", \"label\": \"Background Image\", \"type\": \"image\", \"value\": \"assets/themes/starter/img/Fred-hero.jpg\" }, { \"fred-import\": \"background_settings\" }, { \"name\": \"linkscroll\", \"label\": \"Scroll Link\", \"type\": \"toggle\", \"value\": true }, { \"name\": \"link\", \"label\": \"Link anchor or URL\", \"type\": \"text\", \"value\": null } ] }","title":"Original Setting"},{"location":"themer/options/override/#options-override","text":"{ \"settings\": [ { \"name\": \"image\", \"label\": \"Background Image\", \"type\": \"image\", \"value\": \"assets/themes/starter/img/Fred-hero.jpg\" }, { \"fred-import\": \"background_settings\" }, { \"name\": \"link\", \"label\": \"Link\", \"type\": \"page\", \"value\": { \"id\": 1, \"url\": \"[[~1]]\" } } ] }","title":"Options Override"},{"location":"themer/options/settings/","text":"Options Option Sets can have global settings for things like Media Sources and controlling whether or not dynamic asynchronous XHR calls should occur. The visual Settings that display in the browser, can also have sub-sets that serve to keep things organized. Global Settings The followng control individual settings and grouping for an Element in a Fred-powered page. remote Set to true to cause XHR requests to render the Element through both the Twig and MODX parsers. The element also re-renders through both the Twig and MODX parser when you change element settings. This means you can have dynamic content that references other pages within a Fred page using MODX Snippets. Default: false . cacheOutput This will cache output of an element to static HTML when set to true and when the previous remote global setting is also set to true . mediaSource Name of the Media Source to use for Finder. Multiple Names can be passed separated by comma , . imageMediaSource Name of the Media Source to use for Image fields. Multiple Names can be passed separated by comma , . This option overrides mediaSource . toolbarPluginsInclude List of toolbar plugins to enable for elements. toolbarPluginsExclude List of toolbar plugins to disable for elements. Settings Settings are made of a JSON array of objects and group objects which provide configuratin controls for Elements. Settings can import sub-sets of settings using a fred-import object. Settings properties The following properties apply to all settings, regarless of the types below: name - Name of the setting, can be used as a Twig variable label - Setting's Label, displayed in the Element Settings panel value - A default value type - Type of the setting, see next section Note: for the best end-user experience, it is a good idea to set a default value so end users have a starting point to work with. Otherwise it may be confusing due to having a blank Element that may not match the preview image when dragging and dropping into pages. Available Settings types The following Settings types are used to configure Elements in Fred. text A single-line HTML <input type=\"text\"> element Can have any text value textarea A multie-line HTML <textarea> element Can have any text value Type specific properties: rows - The number of rows to show; Default: 4 select An HTML <select> list element Only supports a single select value Type specific properties: options - An object of value:label properties toggle true/false checkbox returns logical true or false colorswatch Visual color picker, to choose from predefined values Type-specific properties: options An array of colors; Example: [\"lightcoral\", \"red\", \"black\"] Color can be either a string or an object with following properties: value - the value passed to Twig for the color, which can be anything color - the displayed color for the swatch colorAsClass - if set to true the color value will be added as a class to the option, instead of setting as a background label - an arbitrary label for the swatch width - width of the color option, default is 1 colorpicker A color picker that supports arbitrary color definitions including RGB, HSL or Hex values with optional opacity Type-specific properties: showAlpha - A boolean to show an alpha transparency slider; Default: true options - An array of colors; Example: [\"lightcoral\", \"red\", \"black\"] slider An input slider for numbers Type-specific properties: min - REQUIRED : The minimum value of the slider max - REQUIRED : The maximum value of the slider tooltipDecimals \u2013 Number of decimals to show in the slider\u2019s tooltip; Default: 0 step \u2013 A number to increment the slider\u2019s value; Default: 1 page MODX Page select Value is returned as an object in format: {\"id\": 1, \"url\": \"fred.html\"} Refrencing ID or URL alone is done through the dot syntax: {{ page-name-example.id}} Type-specific properties: clearButton - If set to true an x button shows in the input field allowing a user to clear any set value resources - If set, only resource with specified IDs will show; Value can be string with a comma as a separator or an array parents - If set, only resource from these parents (including parents itself) will show; Value can be string with a comma as a separator or an array depth - Depth to look for children for specified parents ; Default: 1 file File picker Type-specific property: mediaSource - Optional name of the Media Source to use that overrides the top-level <a href=\"#mediasource\">`mediaSource` global setting</a> folder Folder picker Type-specific property: mediaSource - Optional name of the Media Source to use that overrides the top-level <a href=\"#mediasource\">`mediaSource` global setting</a> showOnlyFolders - If set to true only folder will be visible in the elFinder; Default: false image Image select Type-specific properties: showPreview - If set to false preview won't appear under the text input mediaSource - Optional name of the Media Source to use that overrides the top-level <a href=\"#imagemediasource\">`imageMediaSource` global setting</a> tagger Allows users to choose from preset Tagger tags Type-specific properties: autoTag - true/false to show/hide the auto tag hideInput - true/false to show/hide the input group - An ID of the Tagger group to use limit - Maximum limit of the number of tags that can be selected Setting Groups Groups are used to organize related Option Sets, or to remove infrequently used settings from the main view. group - Name of a group of related sub-settings that open when clicked in a secondary panel. The value of the group property will be used as the label for the group settings - An array of setting objects { \"group\": \"Group Name\", \"settings\": [ { \u2026 }, { \u2026 } ] } Setting Name Conventions Since the frontend is rendered through Twig, all \"name\" values need to follow JavaScript conventions. This primarily means hyphens, spaces and other special characters are not allowed as they may have reserved functions in JavaScript. Joining Multiple Words in Setting Names Underscore: cta_title, cta_image, cta_link Upper Camel Case (Pascal Case): CtaTitle, CtaImage, CtaLink Lower Camel Case: ctaTitle, ctaImage, ctaLink Example Option Set with Settings { \"remote\": true, \"settings\": [ { \"name\": \"panel_class\", \"label\": \"Panel Classes\", \"type\": \"text\", \"value\": \"col-6 col-sm-12\" }, { \"name\": \"logo\", \"label\": \"Logo\", \"type\": \"image\", \"mediaSource\": \"site-assets\", \"value\": \"assets/images/logo.svg\" }, { \"name\": \"nda-file\", \"label\": \"Upload NDA\", \"type\": \"file\", \"mediaSource\": \"site-assets-files\", \"value\": \"assets/files/contract.pdf\" }, { \"name\": \"slogan\", \"label\": \"Slogan\", \"type\": \"textarea\", \"value\": \"Enter your slogan here\" }, { \"name\": \"panel_type\", \"label\": \"Type of Panel\", \"type\": \"select\", \"options\": {\"info\":\"Info Panel\", \"warn\":\"Warning Panel\",\"error\":\"Error panel\"}, \"value\": \"info\" }, { \"name\": \"padding_top\", \"label\": \"Top padding\", \"type\": \"slider\", \"min\": 0, \"max\": 100, \"step\": 10, \"value\": 20 }, { \"group\": \"CTA\", \"settings\": [ { \"name\": \"cta_class\", \"label\": \"CTA Class\", \"type\": \"select\", \"options\": { \"danger\": \"Red CTA\", \"info\": \"Blue CTA\", \"default\": \"Default CTA\" }, \"value\": \"default\" }, { \"name\": \"show_cta\", \"label\": \"Show CTA\", \"type\": \"toggle\", \"value\": false }, { \"name\": \"color\", \"label\": \"Text Color\", \"type\": \"colorswatch\", \"value\": \"black\", \"options\": [{\"value\":\"primary\", \"color\":\"blue\",\"label\":\"Primary\"}, \"lightcoral\", \"black\", \"rgba(0,255,0,.5)\"] }, { \"name\": \"bg_color\", \"label\": \"Background COlor\", \"type\": \"colorpicker\", \"value\": \"white\", \"showAlpha\": true, \"options\": [\"lightcoral\", \"black\", \"white\"] }, { \"name\": \"page\", \"label\": \"Linked Page\", \"type\": \"page\", \"value\": {\"id\":1, \"url\": \"[[~1]]\"} } ] } ] }","title":"Settings"},{"location":"themer/options/settings/#options","text":"Option Sets can have global settings for things like Media Sources and controlling whether or not dynamic asynchronous XHR calls should occur. The visual Settings that display in the browser, can also have sub-sets that serve to keep things organized.","title":"Options"},{"location":"themer/options/settings/#global-settings","text":"The followng control individual settings and grouping for an Element in a Fred-powered page.","title":"Global Settings"},{"location":"themer/options/settings/#remote","text":"Set to true to cause XHR requests to render the Element through both the Twig and MODX parsers. The element also re-renders through both the Twig and MODX parser when you change element settings. This means you can have dynamic content that references other pages within a Fred page using MODX Snippets. Default: false .","title":"remote"},{"location":"themer/options/settings/#cacheoutput","text":"This will cache output of an element to static HTML when set to true and when the previous remote global setting is also set to true .","title":"cacheOutput"},{"location":"themer/options/settings/#mediasource","text":"Name of the Media Source to use for Finder. Multiple Names can be passed separated by comma , .","title":"mediaSource"},{"location":"themer/options/settings/#imagemediasource","text":"Name of the Media Source to use for Image fields. Multiple Names can be passed separated by comma , . This option overrides mediaSource .","title":"imageMediaSource"},{"location":"themer/options/settings/#toolbarpluginsinclude","text":"List of toolbar plugins to enable for elements.","title":"toolbarPluginsInclude"},{"location":"themer/options/settings/#toolbarpluginsexclude","text":"List of toolbar plugins to disable for elements.","title":"toolbarPluginsExclude"},{"location":"themer/options/settings/#settings","text":"Settings are made of a JSON array of objects and group objects which provide configuratin controls for Elements. Settings can import sub-sets of settings using a fred-import object.","title":"Settings"},{"location":"themer/options/settings/#settings-properties","text":"The following properties apply to all settings, regarless of the types below: name - Name of the setting, can be used as a Twig variable label - Setting's Label, displayed in the Element Settings panel value - A default value type - Type of the setting, see next section Note: for the best end-user experience, it is a good idea to set a default value so end users have a starting point to work with. Otherwise it may be confusing due to having a blank Element that may not match the preview image when dragging and dropping into pages.","title":"Settings properties"},{"location":"themer/options/settings/#available-settings-types","text":"The following Settings types are used to configure Elements in Fred.","title":"Available Settings types"},{"location":"themer/options/settings/#text","text":"A single-line HTML <input type=\"text\"> element Can have any text value","title":"text"},{"location":"themer/options/settings/#textarea","text":"A multie-line HTML <textarea> element Can have any text value Type specific properties: rows - The number of rows to show; Default: 4","title":"textarea"},{"location":"themer/options/settings/#select","text":"An HTML <select> list element Only supports a single select value Type specific properties: options - An object of value:label properties","title":"select"},{"location":"themer/options/settings/#toggle","text":"true/false checkbox returns logical true or false","title":"toggle"},{"location":"themer/options/settings/#colorswatch","text":"Visual color picker, to choose from predefined values Type-specific properties: options An array of colors; Example: [\"lightcoral\", \"red\", \"black\"] Color can be either a string or an object with following properties: value - the value passed to Twig for the color, which can be anything color - the displayed color for the swatch colorAsClass - if set to true the color value will be added as a class to the option, instead of setting as a background label - an arbitrary label for the swatch width - width of the color option, default is 1","title":"colorswatch"},{"location":"themer/options/settings/#colorpicker","text":"A color picker that supports arbitrary color definitions including RGB, HSL or Hex values with optional opacity Type-specific properties: showAlpha - A boolean to show an alpha transparency slider; Default: true options - An array of colors; Example: [\"lightcoral\", \"red\", \"black\"]","title":"colorpicker"},{"location":"themer/options/settings/#slider","text":"An input slider for numbers Type-specific properties: min - REQUIRED : The minimum value of the slider max - REQUIRED : The maximum value of the slider tooltipDecimals \u2013 Number of decimals to show in the slider\u2019s tooltip; Default: 0 step \u2013 A number to increment the slider\u2019s value; Default: 1","title":"slider"},{"location":"themer/options/settings/#page","text":"MODX Page select Value is returned as an object in format: {\"id\": 1, \"url\": \"fred.html\"} Refrencing ID or URL alone is done through the dot syntax: {{ page-name-example.id}} Type-specific properties: clearButton - If set to true an x button shows in the input field allowing a user to clear any set value resources - If set, only resource with specified IDs will show; Value can be string with a comma as a separator or an array parents - If set, only resource from these parents (including parents itself) will show; Value can be string with a comma as a separator or an array depth - Depth to look for children for specified parents ; Default: 1","title":"page"},{"location":"themer/options/settings/#file","text":"File picker Type-specific property: mediaSource - Optional name of the Media Source to use that overrides the top-level <a href=\"#mediasource\">`mediaSource` global setting</a>","title":"file"},{"location":"themer/options/settings/#folder","text":"Folder picker Type-specific property: mediaSource - Optional name of the Media Source to use that overrides the top-level <a href=\"#mediasource\">`mediaSource` global setting</a> showOnlyFolders - If set to true only folder will be visible in the elFinder; Default: false","title":"folder"},{"location":"themer/options/settings/#image","text":"Image select Type-specific properties: showPreview - If set to false preview won't appear under the text input mediaSource - Optional name of the Media Source to use that overrides the top-level <a href=\"#imagemediasource\">`imageMediaSource` global setting</a>","title":"image"},{"location":"themer/options/settings/#tagger","text":"Allows users to choose from preset Tagger tags Type-specific properties: autoTag - true/false to show/hide the auto tag hideInput - true/false to show/hide the input group - An ID of the Tagger group to use limit - Maximum limit of the number of tags that can be selected","title":"tagger"},{"location":"themer/options/settings/#setting-groups","text":"Groups are used to organize related Option Sets, or to remove infrequently used settings from the main view. group - Name of a group of related sub-settings that open when clicked in a secondary panel. The value of the group property will be used as the label for the group settings - An array of setting objects { \"group\": \"Group Name\", \"settings\": [ { \u2026 }, { \u2026 } ] }","title":"Setting Groups"},{"location":"themer/options/settings/#setting-name-conventions","text":"Since the frontend is rendered through Twig, all \"name\" values need to follow JavaScript conventions. This primarily means hyphens, spaces and other special characters are not allowed as they may have reserved functions in JavaScript.","title":"Setting Name Conventions"},{"location":"themer/options/settings/#joining-multiple-words-in-setting-names","text":"Underscore: cta_title, cta_image, cta_link Upper Camel Case (Pascal Case): CtaTitle, CtaImage, CtaLink Lower Camel Case: ctaTitle, ctaImage, ctaLink","title":"Joining Multiple Words in Setting Names"},{"location":"themer/options/settings/#example-option-set-with-settings","text":"{ \"remote\": true, \"settings\": [ { \"name\": \"panel_class\", \"label\": \"Panel Classes\", \"type\": \"text\", \"value\": \"col-6 col-sm-12\" }, { \"name\": \"logo\", \"label\": \"Logo\", \"type\": \"image\", \"mediaSource\": \"site-assets\", \"value\": \"assets/images/logo.svg\" }, { \"name\": \"nda-file\", \"label\": \"Upload NDA\", \"type\": \"file\", \"mediaSource\": \"site-assets-files\", \"value\": \"assets/files/contract.pdf\" }, { \"name\": \"slogan\", \"label\": \"Slogan\", \"type\": \"textarea\", \"value\": \"Enter your slogan here\" }, { \"name\": \"panel_type\", \"label\": \"Type of Panel\", \"type\": \"select\", \"options\": {\"info\":\"Info Panel\", \"warn\":\"Warning Panel\",\"error\":\"Error panel\"}, \"value\": \"info\" }, { \"name\": \"padding_top\", \"label\": \"Top padding\", \"type\": \"slider\", \"min\": 0, \"max\": 100, \"step\": 10, \"value\": 20 }, { \"group\": \"CTA\", \"settings\": [ { \"name\": \"cta_class\", \"label\": \"CTA Class\", \"type\": \"select\", \"options\": { \"danger\": \"Red CTA\", \"info\": \"Blue CTA\", \"default\": \"Default CTA\" }, \"value\": \"default\" }, { \"name\": \"show_cta\", \"label\": \"Show CTA\", \"type\": \"toggle\", \"value\": false }, { \"name\": \"color\", \"label\": \"Text Color\", \"type\": \"colorswatch\", \"value\": \"black\", \"options\": [{\"value\":\"primary\", \"color\":\"blue\",\"label\":\"Primary\"}, \"lightcoral\", \"black\", \"rgba(0,255,0,.5)\"] }, { \"name\": \"bg_color\", \"label\": \"Background COlor\", \"type\": \"colorpicker\", \"value\": \"white\", \"showAlpha\": true, \"options\": [\"lightcoral\", \"black\", \"white\"] }, { \"name\": \"page\", \"label\": \"Linked Page\", \"type\": \"page\", \"value\": {\"id\":1, \"url\": \"[[~1]]\"} } ] } ] }","title":"Example Option Set with Settings"},{"location":"themer/rte_configs/","text":"Rich Text Editor (RTE) Configs todo @theboxer The default RTE configuration for the TinyMCE Editor for Fred is as follows: { \"theme\": \"inlite\", \"inline\": true, \"plugins\": \"modxlink image imagetools media lists\", \"insert_toolbar\": \"image media quicktable modxlink\", \"selection_toolbar\": \"bold italic underline | alignleft aligncenter alignright | bullist numlist | modxlink h2 h3 h4 blockquote\", \"image_advtab\": true, \"imagetools_toolbar\": \"alignleft aligncenter alignright | rotateleft rotateright | flipv fliph | editimage imageoptions\", \"auto_focus\": false, \"branding\": false, \"relative_urls\": false, \"image_dimensions\": false } For an ultra-minimal streamlined RTE, for example for only allowing italics and bolding in headlines, you might use the following RTE config: { \"theme\": \"inlite\", \"inline\": true, \"selection_toolbar\": \"bold italic\" } To learn more about plugins and options for TinyMCE, please see the TinyMCE Examples & Demos .","title":"RTE Configs"},{"location":"themer/rte_configs/#rich-text-editor-rte-configs","text":"todo @theboxer The default RTE configuration for the TinyMCE Editor for Fred is as follows: { \"theme\": \"inlite\", \"inline\": true, \"plugins\": \"modxlink image imagetools media lists\", \"insert_toolbar\": \"image media quicktable modxlink\", \"selection_toolbar\": \"bold italic underline | alignleft aligncenter alignright | bullist numlist | modxlink h2 h3 h4 blockquote\", \"image_advtab\": true, \"imagetools_toolbar\": \"alignleft aligncenter alignright | rotateleft rotateright | flipv fliph | editimage imageoptions\", \"auto_focus\": false, \"branding\": false, \"relative_urls\": false, \"image_dimensions\": false } For an ultra-minimal streamlined RTE, for example for only allowing italics and bolding in headlines, you might use the following RTE config: { \"theme\": \"inlite\", \"inline\": true, \"selection_toolbar\": \"bold italic\" } To learn more about plugins and options for TinyMCE, please see the TinyMCE Examples & Demos .","title":"Rich Text Editor (RTE) Configs"},{"location":"themer/system_settings/","text":"Fred system settings control how your site reacts. Since Fred is loaded on the frontend, you can change how these works per-context, user, or group. Blueprint Sort (fred.blueprint_sort) By default blueprints are sorted by name , but you can switch it to use the rank if you want them to be sorted in a specific order. Blueprint\u2019s Category Sort (fred.blueprint_category_sort) By default blueprint categories are sorted by name , but you can switch it to use the rank if you want them to be sorted in a specific order. Fred Enabled (fred.default_enabled) By default Fred is loaded in an active state whenever someone opens a page. Changing this setting to No will start Fred as disabled until it is turned on in the user's session. Element\u2019s Group Sort (fred.element_sort) By default Element are sorted by name , but you can switch it to use the rank if you want them to be sorted in a specific order. Element\u2019s Group Sort (fred.element_group_sort) By default Element categories are sorted by name , but you can switch it to use the rank if you want them to be sorted in a specific order. Icon Editor (fred.icon_editor) Fred can use plugins that tap into different Element types. The Icon Editor targets <i> Elements that also have a data-fred-name attribute. Image Editor (fred.image_editor) Fred can use plugins that tap into different Element types. The Image Editor targets <img> Elements that also have a data-fred-name attribute. Position of Launcher (fred.launcher_position) The Fred launcher can be positioned in any corner of the site to prevent hiding an Element on your design. Options include: bottom_left , bottom , bottom_right , top_left , top , and top_right . Rich Text Editor (fred.rte) Fred can use plugins that tap into different Element types. The Image Editor targets any wrapper Elements that also have a data-fred-name attribute and are set to data-fred-editable=\"true\" data-fred-rte=\"true\" . Secret (fred.secret) This is an automatically generated key used for signing XHR requests. Sidebar Open (fred.sidebar_open) Open sidebar by default Force Sidebar (fred.force_sidebar) When enabled, user won't be able to close the sidebar.","title":"System Settings"},{"location":"themer/system_settings/#blueprint-sort-fredblueprint_sort","text":"By default blueprints are sorted by name , but you can switch it to use the rank if you want them to be sorted in a specific order.","title":"Blueprint Sort (fred.blueprint_sort)"},{"location":"themer/system_settings/#blueprints-category-sort-fredblueprint_category_sort","text":"By default blueprint categories are sorted by name , but you can switch it to use the rank if you want them to be sorted in a specific order.","title":"Blueprint\u2019s Category Sort (fred.blueprint_category_sort)"},{"location":"themer/system_settings/#fred-enabled-freddefault_enabled","text":"By default Fred is loaded in an active state whenever someone opens a page. Changing this setting to No will start Fred as disabled until it is turned on in the user's session.","title":"Fred Enabled (fred.default_enabled)"},{"location":"themer/system_settings/#elements-group-sort-fredelement_sort","text":"By default Element are sorted by name , but you can switch it to use the rank if you want them to be sorted in a specific order.","title":"Element\u2019s Group Sort (fred.element_sort)"},{"location":"themer/system_settings/#elements-group-sort-fredelement_group_sort","text":"By default Element categories are sorted by name , but you can switch it to use the rank if you want them to be sorted in a specific order.","title":"Element\u2019s Group Sort (fred.element_group_sort)"},{"location":"themer/system_settings/#icon-editor-fredicon_editor","text":"Fred can use plugins that tap into different Element types. The Icon Editor targets <i> Elements that also have a data-fred-name attribute.","title":"Icon Editor (fred.icon_editor)"},{"location":"themer/system_settings/#image-editor-fredimage_editor","text":"Fred can use plugins that tap into different Element types. The Image Editor targets <img> Elements that also have a data-fred-name attribute.","title":"Image Editor (fred.image_editor)"},{"location":"themer/system_settings/#position-of-launcher-fredlauncher_position","text":"The Fred launcher can be positioned in any corner of the site to prevent hiding an Element on your design. Options include: bottom_left , bottom , bottom_right , top_left , top , and top_right .","title":"Position of Launcher (fred.launcher_position)"},{"location":"themer/system_settings/#rich-text-editor-fredrte","text":"Fred can use plugins that tap into different Element types. The Image Editor targets any wrapper Elements that also have a data-fred-name attribute and are set to data-fred-editable=\"true\" data-fred-rte=\"true\" .","title":"Rich Text Editor (fred.rte)"},{"location":"themer/system_settings/#secret-fredsecret","text":"This is an automatically generated key used for signing XHR requests.","title":"Secret (fred.secret)"},{"location":"themer/system_settings/#sidebar-open-fredsidebar_open","text":"Open sidebar by default","title":"Sidebar Open (fred.sidebar_open)"},{"location":"themer/system_settings/#force-sidebar-fredforce_sidebar","text":"When enabled, user won't be able to close the sidebar.","title":"Force Sidebar (fred.force_sidebar)"},{"location":"themer/templates/","text":"Preparing MODX Templates for use with Fred Fred only loads on Pages which use MODX Templates assigned to a Fred Theme ( Extras > Fred > Themed Templates ). Any Resource using a template listed in that table will block access to the Content area in the Manager and load Fred on the front-end when logged in for editing. Dropzones Most templates will have a content Dropzone. Fred also supports multiple Dropzones for things like sidebars, headers, footers, or any other purpose you need. In your Fred Templates, you need to define where Dropzones will be by using data-fred-\u2026 attributes with HTML. Simple Fred Template Example with One Dropzone <html> <head> <title>[[*pagetitle]]</title> </head> <body > <div data-fred-dropzone=\"content\" data-fred-min-height=\"500px\"> [[*content]] </div> </body> </html> The default minimum height for a dropzone is only 5 pixels, which may be a bit small to target. If you wish to have a larger \u201cempty\u201d default state, add a data-fred-min-height=\"250px\" setting with your desired minimum height. A larger minimum height on a dropzone can make it easier to target for dropping Elements when empty. The size of your min-height might also need to change if you have competing or overlapping Elements, such as a fixed top navigation bar. The dropzone\u2019s data-fred-dropzone=\"content\" attribute is required and tells it where to save the rendered Fred content. It also needs to contain a reference to the [[*content]] tag inside of it. When Fred loads, it clears out the content rendered in the dropzone, and loads it with Element data. However, when Fred is not loaded, it just renders whatever tags you have in that area. Multiple Dropzones Sometimes you may want to have a more complex layout with multiple Dropzones, like for a main content area and a sidebar. Fred installs a new Template Variable type for this purpose: Fred Dropzone . To create another dropzone do the following: From the MODX Manager, navigate to the Elements sidebar tree > Template Variables drop-down list > + circle icon to create a new TV Give the TV a name, such as \u201csidebar\u201d and assign it to a Fred category From the Input Options tab choose \"Fred Dropzone\" from the Input Type select list If you want to see the rendered content from the Manager, change the value of the last \u201cHide Field from Manager:\u201d option to \u201cNo\u201d. From the Template Access tab and in the Access column, select the template(s) that will need access to the TV. Click the Save button when done. Example Template with sidebar Dropzone <html> <head> <title>[[*pagetitle]]</title> </head> <body > <section id=\"wrapper\"> <div id=\"main\" data-fred-dropzone=\"content\" data-fred-min-height=\"500px\"> [[*content]] </div> <aside id=\"sidebar\" data-fred-dropzone=\"sidebar\" data-fred-min-height=\"250px\"> [[*sidebar]] </aside> </section> </body> </html>","title":"MODX Templates for Fred"},{"location":"themer/templates/#preparing-modx-templates-for-use-with-fred","text":"Fred only loads on Pages which use MODX Templates assigned to a Fred Theme ( Extras > Fred > Themed Templates ). Any Resource using a template listed in that table will block access to the Content area in the Manager and load Fred on the front-end when logged in for editing.","title":"Preparing MODX Templates for use with Fred"},{"location":"themer/templates/#dropzones","text":"Most templates will have a content Dropzone. Fred also supports multiple Dropzones for things like sidebars, headers, footers, or any other purpose you need. In your Fred Templates, you need to define where Dropzones will be by using data-fred-\u2026 attributes with HTML.","title":"Dropzones"},{"location":"themer/templates/#simple-fred-template-example-with-one-dropzone","text":"<html> <head> <title>[[*pagetitle]]</title> </head> <body > <div data-fred-dropzone=\"content\" data-fred-min-height=\"500px\"> [[*content]] </div> </body> </html> The default minimum height for a dropzone is only 5 pixels, which may be a bit small to target. If you wish to have a larger \u201cempty\u201d default state, add a data-fred-min-height=\"250px\" setting with your desired minimum height. A larger minimum height on a dropzone can make it easier to target for dropping Elements when empty. The size of your min-height might also need to change if you have competing or overlapping Elements, such as a fixed top navigation bar. The dropzone\u2019s data-fred-dropzone=\"content\" attribute is required and tells it where to save the rendered Fred content. It also needs to contain a reference to the [[*content]] tag inside of it. When Fred loads, it clears out the content rendered in the dropzone, and loads it with Element data. However, when Fred is not loaded, it just renders whatever tags you have in that area.","title":"Simple Fred Template Example with One Dropzone"},{"location":"themer/templates/#multiple-dropzones","text":"Sometimes you may want to have a more complex layout with multiple Dropzones, like for a main content area and a sidebar. Fred installs a new Template Variable type for this purpose: Fred Dropzone . To create another dropzone do the following: From the MODX Manager, navigate to the Elements sidebar tree > Template Variables drop-down list > + circle icon to create a new TV Give the TV a name, such as \u201csidebar\u201d and assign it to a Fred category From the Input Options tab choose \"Fred Dropzone\" from the Input Type select list If you want to see the rendered content from the Manager, change the value of the last \u201cHide Field from Manager:\u201d option to \u201cNo\u201d. From the Template Access tab and in the Access column, select the template(s) that will need access to the TV. Click the Save button when done.","title":"Multiple Dropzones"},{"location":"themer/templates/#example-template-with-sidebar-dropzone","text":"<html> <head> <title>[[*pagetitle]]</title> </head> <body > <section id=\"wrapper\"> <div id=\"main\" data-fred-dropzone=\"content\" data-fred-min-height=\"500px\"> [[*content]] </div> <aside id=\"sidebar\" data-fred-dropzone=\"sidebar\" data-fred-min-height=\"250px\"> [[*sidebar]] </aside> </section> </body> </html>","title":"Example Template with sidebar Dropzone"}]}